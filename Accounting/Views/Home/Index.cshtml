@model Accounting.Models.HomeViewModels.LatestPostViewModel

@{
  ViewData["Title"] = ConfigurationSingleton.Instance.ApplicationName;
}

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>

<!-- and it's easy to individually load additional languages -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/go.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/csharp.min.js"></script>
<script>hljs.highlightAll();</script>

<script type="importmap">
  {
    "imports": {
      "three": "https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.module.js",
      "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/"
    }
  }
</script>

<div id="cubes" class="width-100 height-500px margin-bottom-5px"></div>

<script type="module">
  import * as THREE from 'three';

  // Scene, Camera, Renderer
  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0xffffff); // white background

  const cubes = document.getElementById('cubes');
  function getDimensions() {
    const rect = cubes.getBoundingClientRect();
    return { width: rect.width, height: rect.height };
  }
  let { width, height } = getDimensions();

  // Camera focus/orbit parameters
  let orbitTarget = new THREE.Vector3(0, 0, 0); // start targeting the origin
  let orbitRadius = 14;
  const minOrbitRadius = 10;
  const maxOrbitRadius = 20;
  const fixedPolarAngle = Math.PI / 4;
  let azimuthalAngle = Math.PI / 4;
  let isRotating = false;
  let lastX = 0;

  const camera = new THREE.PerspectiveCamera(37, width / height, 0.1, 1000);

  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(width, height);
  cubes.appendChild(renderer.domElement);

  // Plane (white, on ground)
  const planeGeometry = new THREE.PlaneGeometry(10, 10);
  const planeMaterial = new THREE.MeshPhongMaterial({ color: 0xffffff, side: THREE.DoubleSide });
  const plane = new THREE.Mesh(planeGeometry, planeMaterial);
  plane.rotation.x = -Math.PI / 2; // flat on ground
  plane.position.y = 0;
  plane.name = "GroundPlane";
  scene.add(plane);

  // Grid lines (black, flat on ground)
  const gridHelper = new THREE.GridHelper(10, 10, 0x000000, 0x000000);
  gridHelper.position.y = 0.01; // just above plane to avoid z-fighting
  scene.add(gridHelper);

  // Cube geometry/material
  const cubeGeometry = new THREE.BoxGeometry(1, 1, 1);
  const cubeMaterial = new THREE.MeshPhongMaterial({ color: 0x00ff00 });

  // Lighting
  const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
  scene.add(ambientLight);
  const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
  directionalLight.position.set(5, 10, 7.5);
  scene.add(directionalLight);

  function updateCameraPosition() {
    camera.position.x = orbitTarget.x + Math.sin(fixedPolarAngle) * Math.sin(azimuthalAngle) * orbitRadius;
    camera.position.y = orbitTarget.y + Math.cos(fixedPolarAngle) * orbitRadius;
    camera.position.z = orbitTarget.z + Math.sin(fixedPolarAngle) * Math.cos(azimuthalAngle) * orbitRadius;
    camera.lookAt(orbitTarget);
  }
  updateCameraPosition();

  // Mouse controls for right button drag (rotate azimuthally)
  renderer.domElement.addEventListener('mousedown', (event) => {
    if (event.button === 2) {
      isRotating = true;
      lastX = event.clientX;
    }
  });
  window.addEventListener('mousemove', (event) => {
    if (isRotating) {
      const deltaX = event.clientX - lastX;
      azimuthalAngle -= deltaX * 0.01;
      updateCameraPosition();
      lastX = event.clientX;
    }
  });
  window.addEventListener('mouseup', (event) => {
    if (event.button === 2) {
      isRotating = false;
    }
  });
  renderer.domElement.addEventListener('contextmenu', (event) => {
    event.preventDefault();
  });

  // Zoom controls with scroll wheel
  renderer.domElement.addEventListener('wheel', (event) => {
    event.preventDefault();
    orbitRadius += event.deltaY * 0.02;
    orbitRadius = Math.max(minOrbitRadius, Math.min(maxOrbitRadius, orbitRadius));
    updateCameraPosition();
  }, { passive: false });

  // Add cubes on grid or cube face clicks
  const raycaster = new THREE.Raycaster();
  const mouse = new THREE.Vector2();

  function getCubeAt(x, y, z) {
    return scene.children.find(obj =>
      obj.isMesh &&
      obj.geometry.type === 'BoxGeometry' &&
      obj.position.x === x &&
      obj.position.y === y &&
      obj.position.z === z
    );
  }

  // Start with one cube at (0.5, 0.5, 0.5) so it aligns with the grid
  (function addInitialCube() {
    const initCube = new THREE.Mesh(cubeGeometry, cubeMaterial.clone());
    initCube.position.set(0.5, 0.5, 0.5);
    scene.add(initCube);
  })();

  // Move plane and grid to align their (0,0) with the new focus
  function moveGroundTo(targetX, targetZ) {
    // Center the plane and grid around the target cell
    plane.position.x = targetX;
    plane.position.z = targetZ;
    gridHelper.position.x = targetX;
    gridHelper.position.z = targetZ;
  }

  // Left click: add cube. Right click: focus camera on clicked square/cube.
  renderer.domElement.addEventListener('mousedown', (event) => {
    if (event.button !== 0 && event.button !== 2) return;

    const rect = renderer.domElement.getBoundingClientRect();
    mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
    mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

    raycaster.setFromCamera(mouse, camera);

    const cubeMeshes = scene.children.filter(obj =>
      obj.isMesh && obj.geometry.type === 'BoxGeometry'
    );
    const intersects = raycaster.intersectObjects([plane, ...cubeMeshes], false);

    if (intersects.length > 0) {
      const intersect = intersects[0];
      let pos = new THREE.Vector3();

      if (event.button === 0) { // Left click: add cube
        if (intersect.object === plane) {
          // Snap to the center of the closest grid cell
          const x = Math.floor(intersect.point.x - plane.position.x + 0.5) + plane.position.x + 0.5;
          const z = Math.floor(intersect.point.z - plane.position.z + 0.5) + plane.position.z + 0.5;
          const y = 0.5; // on ground
          pos.set(x, y, z);
        } else {
          // Clicked on a cube: place cube adjacent, in the direction of the face normal
          const normal = intersect.face.normal;
          const objectPos = intersect.object.position.clone();
          const newPos = objectPos.add(normal);
          pos.set(
            Math.round(newPos.x - 0.5) + 0.5,
            Math.round(newPos.y - 0.5) + 0.5,
            Math.round(newPos.z - 0.5) + 0.5
          );
        }

        // Only place if empty
        if (!getCubeAt(pos.x, pos.y, pos.z)) {
          const newCube = new THREE.Mesh(cubeGeometry, cubeMaterial.clone());
          newCube.position.set(pos.x, pos.y, pos.z);
          scene.add(newCube);

          // Shift focus and ground to new cube's bottom center
          orbitTarget.set(pos.x, pos.y - 0.5, pos.z);
          moveGroundTo(Math.floor(pos.x), Math.floor(pos.z));
          updateCameraPosition();
        }
      } else if (event.button === 2) { // Right click: focus camera
        if (intersect.object === plane) {
          // On grid: focus on bottom center of grid cell
          const x = Math.floor(intersect.point.x - plane.position.x + 0.5) + plane.position.x + 0.5;
          const z = Math.floor(intersect.point.z - plane.position.z + 0.5) + plane.position.z + 0.5;
          const y = 0; // bottom
          orbitTarget.set(x, y, z);
          moveGroundTo(Math.floor(x), Math.floor(z));
        } else {
          // On cube: focus on bottom center of cube
          const cubePos = intersect.object.position;
          orbitTarget.set(cubePos.x, cubePos.y - 0.5, cubePos.z);
          moveGroundTo(Math.floor(cubePos.x), Math.floor(cubePos.z));
        }
        updateCameraPosition();
      }
    }
  });

  // Animation Loop
  function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }
  animate();

  // Responsive
  window.addEventListener('resize', () => {
    const dims = getDimensions();
    camera.aspect = dims.width / dims.height;
    camera.updateProjectionMatrix();
    renderer.setSize(dims.width, dims.height);
  });
</script>

@if (!User.Identity.IsAuthenticated)
{
  <div class="display-flex margin-bottom-5px">
    <div class="flex-1 background-color-A62626 text-align-center">
      <a href="#" class="font-Oswald color-white font-size-40px">screenshots</a>
    </div>
  </div>
  <div class="background-color-antiquewhite padding-20px">
    <div class="display-flex margin-bottom-5px">
      <div class="flex-1"></div>
      <div class="display-flex flex-direction-column">
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Home</div>
        <img src="/images/chrome_ZpBdhfXFj5.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div class="flex-1"></div>
      <div class="display-flex flex-direction-column">
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Invoices</div>
        <img src="/images/chrome_ZpBdhfXFj5.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div class="flex-1"></div>
      <div class="display-flex flex-direction-column">
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Customers</div>
        <img src="/images/chrome_ZpBdhfXFj5.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div class="flex-1"></div>
      <div class="display-flex flex-direction-column">
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Items</div>
        <img src="/images/chrome_ZpBdhfXFj5.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div class="flex-1"></div>
    </div>
    <div class="display-flex">
      <div class="flex-1"></div>
      <div class="display-flex flex-direction-column">
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Locations</div>
        <img src="/images/chrome_ZpBdhfXFj5.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div class="flex-1"></div>
      <div class="display-flex flex-direction-column">
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Accounts</div>
        <img src="/images/chrome_ZpBdhfXFj5.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div class="flex-1"></div>
      <div class="display-flex flex-direction-column">
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Users</div>
        <img src="/images/chrome_ZpBdhfXFj5.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div class="flex-1"></div>
      <div class="display-flex flex-direction-column">
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Tenants</div>
        <img src="/images/chrome_ZpBdhfXFj5.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div class="flex-1"></div>
    </div>
  </div>

  <div class="display-flex margin-bottom-5px">
    <div class="flex-1 background-color-A62626 text-align-center">
      <a href="https://github.com/denys-olleik/accounting" class="font-Oswald color-white font-size-40px">source</a>
    </div>
    <div class="width-5px"></div>
    <div class="flex-1 background-color-A62626 text-align-center">
      <a asp-action="Register" asp-controller="Registration" class="font-Oswald color-white font-size-40px">demo</a>
    </div>
  </div>
  <div class="background-color-antiquewhite padding-sides-10px padding-bottom-10px font-Oswald">
    <div class="font-size-20px">Hosting options</div>
    <table class="border-collapse width-100 background-color-antiquewhite">
      <thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
        <tr>
          <th class="text-align-left width-1px padding-right-20px">#</th>
          <th class="text-align-left width-1px padding-right-20px">Option</th>
          <th class="text-align-left width-1px white-space-nowrap padding-right-20px">SSH</th>
          <th class="text-align-left width-1px white-space-nowrap padding-right-20px">DNS</th>
          <th class="text-align-right white-space-nowrap">Support</th>
        </tr>
      </thead>
      <tbody class="font-Roboto-Mono">
        <tr>
          <td class="padding-right-20px vertical-align-top">1</td>
          <td class="padding-right-20px vertical-align-top">
            Shared
          </td>
          <td class="text-align-left padding-right-20px vertical-align-top">no</td>
          <td class="text-align-left padding-right-20px vertical-align-top">no</td>
          <td class="text-align-right vertical-align-top">free</td>
        </tr>
        <tr>
          <td class="padding-right-20px vertical-align-top">2</td>
          <td class="padding-right-20px vertical-align-top">
            Dedicated
          </td>
          <td class="text-align-left white-space-nowrap padding-right-20px vertical-align-top">no</td>
          <td class="text-align-left white-space-nowrap padding-right-20px vertical-align-top">yes</td>
          <td class="text-align-right vertical-align-top">$1,000/year + cloud usage</td>
        </tr>
        <tr>
          <td class="padding-right-20px vertical-align-top">3</td>
          <td class="padding-right-20px vertical-align-top">
            Independent
          </td>
          <td class="text-align-left white-space-nowrap padding-right-20px vertical-align-top">yes</td>
          <td class="text-align-left white-space-nowrap padding-right-20px vertical-align-top">yes</td>
          <td class="text-align-right vertical-align-top">no</td>
        </tr>
        <tr>
          <td class="padding-right-20px vertical-align-top">4</td>
          <td class="padding-right-20px vertical-align-top">
            localhost
          </td>
          <td class="text-align-left white-space-nowrap padding-right-20px vertical-align-top">n/a</td>
          <td class="text-align-left white-space-nowrap padding-right-20px vertical-align-top">n/a</td>
          <td class="text-align-right vertical-align-top">n/a</td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="background-color-antiquewhite padding-sides-10px margin-top-5px padding-bottom-10px font-Oswald margin-bottom-5px">
    <div class="font-size-20px">3rd party integrations</div>
    <table class="border-collapse width-100 background-color-antiquewhite">
      <thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
        <tr>
          <th class="text-align-left width-1px padding-right-20px">#</th>
          <th class="text-align-left width-1px padding-right-20px">Vendor</th>

          <th class="text-align-left white-space-nowrap padding-right-20px">Purpose</th>
        </tr>
      </thead>
      <tbody class="font-Roboto-Mono">
        <tr>
          <td class="padding-right-20px vertical-align-top">1</td>
          <td class="padding-right-20px vertical-align-top">
            SendGrid
          </td>
          <td class="text-align-left padding-right-20px">
            for sending password recovery emails
          </td>
        </tr>
        <tr>
          <td class="padding-right-20px vertical-align-top">2</td>
          <td class="padding-right-20px vertical-align-top">
            DigitalOcean
          </td>
          <td class="text-align-left padding-right-20px vertical-align-top">
            for provisioning independent instances of this application
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="display-flex margin-bottom-5px">
    <div class="flex-1 background-color-A62626 text-align-center">
      <a href="#" class="font-Oswald color-white font-size-40px letter-spacing-10px">unlimited</a>
    </div>
  </div>
  <div class="background-color-antiquewhite padding-sides-10px padding-bottom-10px font-Oswald">
    <div class="font-size-20px">Features</div>
    <table class="border-collapse width-100 background-color-antiquewhite">
      <thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
        <tr>
          <th class="text-align-left width-1px padding-right-20px">#</th>
          <th class="text-align-left width-1px padding-right-20px">Feature</th>
          <th class="text-align-right white-space-nowrap">Limits</th>
        </tr>
      </thead>
      <tbody class="font-Roboto-Mono">
        <tr>
          <td class="padding-right-20px vertical-align-top">1</td>
          <td class="padding-right-20px vertical-align-top">
            Organizations
          </td>
          <td class="text-align-right vertical-align-top">max <b>two</b> on <b>shared</b></td>
        </tr>
        <tr>
          <td class="padding-right-20px vertical-align-top">2</td>
          <td class="padding-right-20px vertical-align-top">
            Users
          </td>
          <td class="text-align-right vertical-align-top">unlimited</td>
        </tr>
        <tr>
          <td class="padding-right-20px vertical-align-top">3</td>
          <td class="padding-right-20px vertical-align-top">
            Accounts
          </td>
          <td class="text-align-right vertical-align-top">unlimited</td>
        </tr>
        <tr>
          <td class="padding-right-20px vertical-align-top">4</td>
          <td class="padding-right-20px vertical-align-top">
            Invoices
          </td>
          <td class="text-align-right vertical-align-top">unlimited</td>
        </tr>
        <tr>
          <td class="padding-right-20px vertical-align-top">5</td>
          <td class="padding-right-20px vertical-align-top">
            Payments
          </td>
          <td class="text-align-right vertical-align-top">unlimited</td>
        </tr>
        <tr>
          <td class="padding-right-20px vertical-align-top">6</td>
          <td class="padding-right-20px vertical-align-top">
            Attachments
          </td>
          <td class="text-align-right vertical-align-top"><b>three</b> second upload limit on <b>shared</b></td>
        </tr>
        <tr>
          <td class="padding-right-20px vertical-align-top">7</td>
          <td class="padding-right-20px vertical-align-top">
            Inventories
          </td>
          <td class="text-align-right vertical-align-top">unlimited</td>
        </tr>
        <tr>
          <td class="padding-right-20px vertical-align-top">8</td>
          <td class="padding-right-20px vertical-align-top">
            Locations
          </td>
          <td class="text-align-right vertical-align-top">unlimited</td>
        </tr>
        <tr>
          <td class="padding-right-20px vertical-align-top">9</td>
          <td class="padding-right-20px vertical-align-top">
            Blogs
          </td>
          <td class="text-align-right vertical-align-top">unlimited</td>
        </tr>
      </tbody>
    </table>
  </div>
  <div class="display-flex">
    <div class="flex-1"></div>
    <div class="color-white">v22</div>
  </div>
}

@if (User.Identity.IsAuthenticated)
{
  <div class="background-color-antiquewhite">
    <ul class="margin-0">
      <li>
        <a href="@Url.Action("Update", "Organization")">Organization 🟩 </a>
      </li>
      <li>
        <a href="@Url.Action("Users", "User")">Users 🟩 </a>
        <ul>
          <li><a href="@Url.Action("Create", "User")">Create user 🟩 </a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("ToDos", "ToDo")">Project management 🟧</a>
        <ul>
          <li><a href="@Url.Action("Create", "ToDo")">Create task 🟧</a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Invoices", "Invoice")">Invoices 🟩 </a>
        <ul>
          <li><a href="@Url.Action("Create", "Invoice")">Create invoice 🟩 </a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Customers", "Customer")">Customers and vendors 🟩 </a>
        <ul>
          <li><a href="@Url.Action("Create", "Customer")">Create customer and or vendor 🟩 </a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("PaymentTerms", "PaymentTerm")">Payment terms 🟩 </a>
        <ul>
          <li><a href="@Url.Action("Create", "PaymentTerm")">Create payment term 🟩 </a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Items", "Item")">Items 🟨</a>
        <ul>
          <li><a href="@Url.Action("Create", "Item")">Create item 🟧</a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Locations", "Location")">Locations 🟧</a>
        <ul>
          <li><a href="@Url.Action("Create", "Location")">Create location 🟩</a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Reconciliations", "Reconciliation")">Reconciliations 🟥</a>
        <ul>
          <li><a href="@Url.Action("Import", "Reconciliation")">Import 🟥</a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Accounts", "Account")">Accounts 🟩 </a>
        <ul>
          <li><a href="@Url.Action("Create", "Account")">Create account 🟩 </a></li>
        </ul>
      </li>
      @* <li>
        <a href="@Url.Action("ShippingAndReceiving", "ShippingAndReceiving")">Shipping and receiving</a>
      </li> *@
      <li>
        <a href="@Url.Action("Blogs", "Blog")">Blog 🟩 </a>
        <ul>
          <li><a href="@Url.Action("Create", "Blog")">Create post 🟩 </a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Tenants", "Tenant")">Tenants 🟩 </a>
        <ul>
          <li>
            <a href="@Url.Action("Secrets", "Secret")">Secrets 🟩 </a>
          </li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("UpdatePassword", "User")">Update password 🟩 </a>
      </li>
      <li>
        <a href="@Url.Action("RequestLogs", "Diagnostics")">Request logs 🟨</a>
      </li>
      <li>
        <a href="@Url.Action("Exceptions", "Diagnostics")">Exceptions 🟨</a>
      </li>
    </ul>
  </div>
}

@if (User.Identity.IsAuthenticated)
{
  <div class="display-flex background-color-white">
    <div class="flex-1">
      <canvas id="accountBalanceChart" width="400" height="400"></canvas>
    </div>
    <div class="width-5px">
    </div>
    <div class="flex-1">
    </div>
  </div>
}

@if (User.Identity.IsAuthenticated)
{
  <script>
    (async () => {
      try {
        const response = await fetch(`${window.location.protocol}//${window.location.hostname}:${window.location.port ? window.location.port : ''}/api/r/get-account-balance-report`);
        const apiData = await response.json();

        const accountNumbers = apiData.map(item => item.name);
        const currentBalances = apiData.map(item => item.currentBalance);

        const ctx = document.getElementById('accountBalanceChart').getContext('2d');
        const myChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: accountNumbers,
            datasets: [{
              label: 'Current Balance',
              data: currentBalances,
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 1
            }]
          }
        });
      } catch (error) {

      }
    })();
  </script>
}