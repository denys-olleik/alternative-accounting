@model Accounting.Models.HomeViewModels.LatestPostViewModel

@{
  ViewData["Title"] = ConfigurationSingleton.Instance.ApplicationName;
}

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>

<!-- and it's easy to individually load additional languages -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/go.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/csharp.min.js"></script>
<script>hljs.highlightAll();</script>

@if (!User.Identity.IsAuthenticated)
{
  <script type="importmap">
    {
      "imports": {
        "three": "https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.module.js",
        "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/"
      }
    }
  </script>

  <div class="display-flex margin-bottom-5px">
    <div class="flex-1 display-flex flex-direction-column">
      <img class="width-100" src="~/images/cat.png" />
      <div class="padding-5px flex-1 color-white background-color-black font-Roboto-Mono"><span class="blinking-cursor">â–ˆ</span> Listen up you maggots! You may use this system for <span class="color-lawngreen blinking-cursor">FREE</span> until you can afford to <u>pay one ounce of</u> <span class="color-lawngreen blinking-cursor"><u>gold</u></span> <u>coin per year</u>. Work with us and get paid in gold <span class="blinking-cursor color-lawngreen">coin</span>. Join us and no one will ever fuck with you again.</div>
    </div>
    <div class="width-5px"></div>
    <div class="flex-1 display-flex flex-direction-column">
      <div id="app" class="width-100 height-500px"></div>
      <div class="flex-1 background-color-black">

      </div>
    </div>
  </div>

  <script type="module">
    import * as THREE from 'three';

    // Scene
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xdddddd);

    // Camera
    const camera = new THREE.PerspectiveCamera(
      75,
      document.getElementById('app').clientWidth / 500,
      0.1,
      1000
    );
    camera.position.set(0, 2, 5);
    camera.lookAt(0, 1, 0);

    // Renderer
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(document.getElementById('app').clientWidth, 500);
    document.getElementById('app').appendChild(renderer.domElement);

    // Plane
    const planeGeometry = new THREE.PlaneGeometry(10, 10);
    const planeMaterial = new THREE.MeshStandardMaterial({ color: 0x888888 });
    const plane = new THREE.Mesh(planeGeometry, planeMaterial);
    plane.rotation.x = -Math.PI / 2;
    scene.add(plane);

    // Cube
    const cubeGeometry = new THREE.BoxGeometry(1, 1, 1);
    const cubeMaterial = new THREE.MeshStandardMaterial({ color: 0x3366ff });
    const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
    cube.position.y = 1;
    scene.add(cube);

    // Light
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
    directionalLight.position.set(5, 10, 7.5);
    scene.add(directionalLight);

    // Animation loop
    function animate() {
      requestAnimationFrame(animate);
      cube.rotation.y += 0.01;
      cube.rotation.x += 0.005;
      renderer.render(scene, camera);
    }
    animate();

    // Responsive resizing (optional)
    window.addEventListener('resize', () => {
      const width = document.getElementById('app').clientWidth;
      const height = 500;
      camera.aspect = width / height;
      camera.updateProjectionMatrix();
      renderer.setSize(width, height);
    });
  </script>
}

@if (!User.Identity.IsAuthenticated)
{
  @* <div class="display-flex margin-bottom-5px">
    <div class="flex-1 background-color-A62626 text-align-center">
      <a href="#" class="font-Oswald color-white font-size-40px">screenshots</a>
    </div>
  </div>
  <div class="background-color-antiquewhite padding-20px margin-bottom-5px">
    <div class="display-flex justify-content-space-between margin-bottom-5px gap-5px">
      <div>
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Home</div>
        <img src="/images/home.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div>
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Invoices</div>
        <img src="/images/invoices.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div>
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Customers</div>
        <img src="/images/customers.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div>
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Items</div>
        <img src="/images/items.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
    </div>
    <div class="display-flex justify-content-space-between margin-bottom-5px gap-5px">
      <div>
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Locations</div>
        <img src="/images/locations.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div>
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Accounts</div>
        <img src="/images/accounts.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div>
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Users</div>
        <img src="/images/users.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
      <div>
        <div class="background-color-A62626 color-white padding-left-5px font-size-20px">Tenants</div>
        <img src="/images/tenants.png" alt="Screenshot" class="width-150px border-5pxsolid-A62626">
      </div>
    </div>
  </div> *@

  <div class="display-flex margin-bottom-5px">
    <div class="flex-1 background-color-A62626 text-align-center">
      <a href="https://github.com/denys-olleik/alternative-accounting" class="font-Oswald color-white font-size-40px">source</a>
    </div>
    <div class="width-5px"></div>
    <div class="flex-1 background-color-A62626 text-align-center">
      <a asp-action="Register" asp-controller="Registration" class="font-Oswald color-white font-size-40px">demo</a>
    </div>
  </div>
  <div class="background-color-antiquewhite padding-10px font-Roboto-Mono">
    <p class="font-size-20px">Double entry accounting system.</p>

    <h2>Getting started</h2>

    <ul>
      <li>Clone this repository</li>
      <li>Have PostgreSQL installed</li>
      <li>Update <code>appsettings.json</code>.<code>DatabasePassword</code></li>
      <li>Set <code>database-reset.json</code>.<code>Reset</code> to <code>true</code></li>
      <li>Run the application</li>
    </ul>

    <h2>Model any financial operation</h2>

    <ul>
      <li>Create invoice.</li>
      <li>Receive payment.</li>
      <li>Record foreign currency transaction.</li>
      <li>Issue or assign equity (e.g., ownerâ€™s capital, shares issued).</li>
      <li>Purchase inventory.</li>
      <li>Move inventory between locations.</li>
      <li>Record expense payment (e.g., rent, utilities).</li>
      <li>Record payroll.</li>
      <li>Record depreciation of assets.</li>
      <li>Accrue liabilities (e.g., taxes payable, interest payable).</li>
      <li>...</li>
    </ul>

    <h2>Core concepts</h2>

    <ul>
      <li>
        Journal - chronological record of all financial transactions good enough to satisfy an audit.
        <ul>
          <li>Double-entry - credits and debits.</li>
          <li>Forward-only - journal entries cannot be modified or deleted.</li>
        </ul>
      </li>
      <li>Accounts - chart of accounts.</li>
      <li>Transaction - groups of journal entries.</li>
    </ul>

    <h2>Implemented functionality</h2>

    <ul>
      <li>Creating invoice</li>
      <li>Receiving payment</li>
      <li>Reconciliations</li>
    </ul>
  </div>
}

@if (User.Identity.IsAuthenticated)
{
  <div class="background-color-antiquewhite">
    <ul class="margin-0">
      <li>
        <a href="@Url.Action("Update", "Organization")">Organization ðŸŸ© </a>
      </li>
      <li>
        <a href="@Url.Action("Users", "User")">Users ðŸŸ© </a>
        <ul>
          <li><a href="@Url.Action("Create", "User")">Create user ðŸŸ© </a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Tasks", "Task")">Project management ðŸŸ§</a>
        <ul>
          <li><a href="@Url.Action("Create", "Task")">Create task ðŸŸ§</a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Invoices", "Invoice")">Invoices ðŸŸ© </a>
        <ul>
          <li><a href="@Url.Action("Create", "Invoice")">Create invoice ðŸŸ© </a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Customers", "Customer")">Customers and vendors ðŸŸ© </a>
        <ul>
          <li><a href="@Url.Action("Create", "Customer")">Create customer and or vendor ðŸŸ© </a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("PaymentTerms", "PaymentTerm")">Payment terms ðŸŸ© </a>
        <ul>
          <li><a href="@Url.Action("Create", "PaymentTerm")">Create payment term ðŸŸ© </a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Items", "Item")">Items ðŸŸ¨</a>
        <ul>
          <li><a href="@Url.Action("Create", "Item")">Create item ðŸŸ§</a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Locations", "Location")">Locations ðŸŸ§</a>
        <ul>
          <li><a href="@Url.Action("Create", "Location")">Create location ðŸŸ©</a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Reconciliations", "ReconciliationRev")">Reconciliations ðŸŸ©</a>
      </li>
      <li>
        <a href="@Url.Action("Accounts", "Account")">Accounts ðŸŸ© </a>
        <ul>
          <li><a href="@Url.Action("Create", "Account")">Create account ðŸŸ© </a></li>
        </ul>
      </li>
      @* <li>
        <a href="@Url.Action("ShippingAndReceiving", "ShippingAndReceiving")">Shipping and receiving</a>
      </li> *@
      <li>
        <a href="@Url.Action("Blogs", "Blog")">Blog ðŸŸ© </a>
        <ul>
          <li><a href="@Url.Action("Create", "Blog")">Create post ðŸŸ© </a></li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("Tenants", "Tenant")">Tenants ðŸŸ© </a>
        <ul>
          <li>
            <a href="@Url.Action("Secrets", "Secret")">Secrets ðŸŸ© </a>
          </li>
        </ul>
      </li>
      <li>
        <a href="@Url.Action("UpdatePassword", "User")">Update password ðŸŸ©</a>
      </li>
      <li>
        <a href="@Url.Action("RequestLogs", "Diagnostics")">Request logs ðŸŸ©</a>
      </li>
      <li>
        <a href="@Url.Action("Exceptions", "Diagnostics")">Exceptions ðŸŸ©</a>
      </li>
    </ul>
  </div>
}

@if (User.Identity.IsAuthenticated)
{
  <div class="display-flex background-color-white">
    <div class="flex-1">
      <canvas id="accountBalanceChart" width="400" height="400"></canvas>
    </div>
    <div class="width-5px">
    </div>
    <div class="flex-1">
    </div>
  </div>
}

@if (User.Identity.IsAuthenticated)
{
  <script>
    (async () => {
      try {
        const response = await fetch(`${window.location.protocol}//${window.location.hostname}:${window.location.port ? window.location.port : ''}/api/r/get-account-balance-report`);
        const apiData = await response.json();

        const accountNumbers = apiData.map(item => item.name);
        const currentBalances = apiData.map(item => item.currentBalance);

        const ctx = document.getElementById('accountBalanceChart').getContext('2d');
        const myChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: accountNumbers,
            datasets: [{
              label: 'Current Balance',
              data: currentBalances,
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 1
            }]
          }
        });
      } catch (error) {

      }
    })();
  </script>
}