@{
  Layout = "_EmptyLayout";
  ViewData["Title"] = "Game - " + ConfigurationSingleton.Instance.ApplicationName;
}

<script type="importmap">
  {
    "imports": {
      "three": "https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.module.js",
      "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/"
    }
  }
</script>

<div id="app" class="width-100 height-500px margin-bottom-5px"></div>

<script type="module">
  // --- UserId ---
  let userId = localStorage.getItem('userId');
  if (!userId) {
    userId = crypto.randomUUID();
    localStorage.setItem('userId', userId);
  }

  import * as THREE from 'three';

  // --- Scene setup ---
  const width = 1920, height = 1080;
  const container = document.getElementById('app');
  const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });
  renderer.setSize(width, height);
  renderer.setClearColor(0x20232a);
  container.appendChild(renderer.domElement);

  const scene = new THREE.Scene();
  const camera = new THREE.OrthographicCamera(0, width, height, 0, -1, 1);

  // --- Grid ---
  function createGrid(gridSize, color = 0x444444) {
    const gridLines = [];
    for (let x = 0; x <= width; x += gridSize) {
      gridLines.push(
        new THREE.Vector3(x, 0, 0),
        new THREE.Vector3(x, height, 0)
      );
    }
    for (let y = 0; y <= height; y += gridSize) {
      gridLines.push(
        new THREE.Vector3(0, y, 0),
        new THREE.Vector3(width, y, 0)
      );
    }
    const geometry = new THREE.BufferGeometry().setFromPoints(gridLines);
    const material = new THREE.LineBasicMaterial({ color: color, linewidth: 1 });
    return new THREE.LineSegments(geometry, material);
  }
  const gridSize = 36;
  const grid = createGrid(gridSize, 0x444444);
  scene.add(grid);

  // --- Highlight Square ---
  const squareGeometry = new THREE.PlaneGeometry(gridSize, gridSize);
  const squareMaterial = new THREE.MeshBasicMaterial({
    color: 0xffff99,
    transparent: true,
    opacity: 0.32
  });
  const squareGlow = new THREE.Mesh(squareGeometry, squareMaterial);

  const borderGeometry = new THREE.PlaneGeometry(gridSize + 8, gridSize + 8);
  const borderMaterial = new THREE.MeshBasicMaterial({
    color: 0xffff99,
    transparent: true,
    opacity: 0.14
  });
  const squareBorder = new THREE.Mesh(borderGeometry, borderMaterial);

  squareGlow.position.set(-gridSize, -gridSize, 0.1);
  squareBorder.position.set(-gridSize, -gridSize, 0.09);
  scene.add(squareBorder);
  scene.add(squareGlow);

  // --- Crosshair lines ---
  const crosshairMaterial = new THREE.LineBasicMaterial({ color: 0xff0000, linewidth: 2 });
  let verticalLine, horizontalLine;

  function createCrosshair(x, y) {
    const flippedY = height - y;
    if (verticalLine) scene.remove(verticalLine);
    if (horizontalLine) scene.remove(horizontalLine);

    const vertGeom = new THREE.BufferGeometry().setFromPoints([
      new THREE.Vector3(x, 0, 0.2),
      new THREE.Vector3(x, height, 0.2)
    ]);
    verticalLine = new THREE.Line(vertGeom, crosshairMaterial);

    const horizGeom = new THREE.BufferGeometry().setFromPoints([
      new THREE.Vector3(0, flippedY, 0.2),
      new THREE.Vector3(width, flippedY, 0.2)
    ]);
    horizontalLine = new THREE.Line(horizGeom, crosshairMaterial);

    scene.add(verticalLine);
    scene.add(horizontalLine);
  }

  // Initial crosshair in center
  let mouseX = width / 2, mouseY = height / 2;
  createCrosshair(mouseX, mouseY);

  function updateHighlight(x, y) {
    const col = Math.floor(x / gridSize);
    const row = Math.floor(y / gridSize);
    const squareX = col * gridSize + gridSize / 2;
    const squareY = height - (row * gridSize + gridSize / 2);
    squareGlow.position.set(squareX, squareY, 0.1);
    squareBorder.position.set(squareX, squareY, 0.09);
  }

  // Mouse move handler
  let mouseOverCanvas = false;
  renderer.domElement.addEventListener('mousemove', (e) => {
    const rect = renderer.domElement.getBoundingClientRect();
    mouseX = Math.floor((e.clientX - rect.left) * (width / rect.width));
    mouseY = Math.floor((e.clientY - rect.top) * (height / rect.height));
    createCrosshair(mouseX, mouseY);
    updateHighlight(mouseX, mouseY);
    needsRender = true;
  });

  renderer.domElement.addEventListener('mouseenter', () => {
    mouseOverCanvas = true;
  });
  renderer.domElement.addEventListener('mouseleave', () => {
    mouseOverCanvas = false;
  });

  updateHighlight(mouseX, mouseY);

  // --- Player "pixels" (animated) ---
  // Each player is mapped by a key (userId or index)
  // Each has: { mesh, lastPos: {x, y}, targetPos: {x, y}, animStart: timestamp }
  const playerPixels = new Map();

  // Customize pixel appearance
  function createPlayerPixelMesh(isSelf) {
    const size = gridSize * 0.65;
    return new THREE.Mesh(
      new THREE.PlaneGeometry(size, size),
      new THREE.MeshBasicMaterial({
        color: isSelf ? 0x44ff44 : 0xffffff,
        opacity: 1,
        transparent: false,
        depthTest: false
      })
    );
  }

  // --- Animation/interpolation helpers ---
  function lerp(a, b, t) {
    return a + (b - a) * t;
  }

  // --- Rendering control ---
  let needsRender = true;

  // --- Backend polling and animation state ---
  let lastSentX = null, lastSentY = null;

  // Store latest full player list from backend
  let latestPlayersFromServer = [];

  // --- Send coordinates to backend every second if mouse is over canvas and changed ---
  async function sendCoordinates(x, y) {
    try {
      const response = await fetch('/api/player/report-position', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ x, y, userId })
      });
      if (response.ok) {
        const data = await response.json();
        if (Array.isArray(data.players) || Array.isArray(data.Players)) {
          // Accept either lowercase or uppercase property
          latestPlayersFromServer = (data.players || data.Players).map(p => ({
            x: p.x ?? p.X,
            y: p.y ?? p.Y
          }));
          needsRender = true;
        }
      }
    } catch (err) {
      // Ignore for now
    }
  }

  setInterval(() => {
    if (mouseOverCanvas) {
      if (mouseX !== lastSentX || mouseY !== lastSentY) {
        sendCoordinates(mouseX, mouseY);
        lastSentX = mouseX;
        lastSentY = mouseY;
      }
    }
  }, 1000);

  // --- Animation loop ---
  function animate(now) {
    now = now || performance.now();

    // -- Synchronize playerPixels map to latestPlayersFromServer --
    // Make a new Map of "wanted" keys: for now, use 'x:y' as key
    // (If backend returns userId in future, use that)
    const presentKeys = new Set();

    for (const player of latestPlayersFromServer) {
      const key = `${player.x}:${player.y}`;
      presentKeys.add(key);

      // Check if pixel exists at this key
      let pixelData = playerPixels.get(key);

      // If not present, create one (with initial lastPos = targetPos)
      if (!pixelData) {
        // Is this the local player?
        const isSelf =
          Math.abs(player.x - lastSentX) < 1 &&
          Math.abs(player.y - lastSentY) < 1 &&
          mouseOverCanvas; // Simple heuristic

        const mesh = createPlayerPixelMesh(isSelf);
        mesh.position.set(
          Math.floor(player.x / gridSize) * gridSize + gridSize / 2,
          height - (Math.floor(player.y / gridSize) * gridSize + gridSize / 2),
          isSelf ? 0.25 : 0.2
        );
        scene.add(mesh);

        playerPixels.set(key, {
          mesh,
          lastPos: { x: player.x, y: player.y },
          targetPos: { x: player.x, y: player.y },
          animStart: now
        });
        needsRender = true;
      } else {
        // Animate to new position if different
        if (
          pixelData.targetPos.x !== player.x ||
          pixelData.targetPos.y !== player.y
        ) {
          // Interrupt current animation and start to new target
          const mesh = pixelData.mesh;
          // Compute current position (interpolate between lastPos and old target)
          let t =
            Math.min(
              1,
              (now - pixelData.animStart) / 1000
            );
          const curX = lerp(pixelData.lastPos.x, pixelData.targetPos.x, t);
          const curY = lerp(pixelData.lastPos.y, pixelData.targetPos.y, t);

          pixelData.lastPos = { x: curX, y: curY };
          pixelData.targetPos = { x: player.x, y: player.y };
          pixelData.animStart = now;
          needsRender = true;
        }
      }
    }

    // Remove pixels that are no longer present
    for (const [key, pixelData] of playerPixels) {
      if (!presentKeys.has(key)) {
        scene.remove(pixelData.mesh);
        playerPixels.delete(key);
        needsRender = true;
      }
    }

    // --- Animate movement ---
    for (const pixelData of playerPixels.values()) {
      const { mesh, lastPos, targetPos, animStart } = pixelData;

      let t = Math.min(1, (now - animStart) / 1000);
      const curX = lerp(lastPos.x, targetPos.x, t);
      const curY = lerp(lastPos.y, targetPos.y, t);

      mesh.position.set(
        Math.floor(curX / gridSize) * gridSize + gridSize / 2,
        height - (Math.floor(curY / gridSize) * gridSize + gridSize / 2),
        mesh.position.z // Already set for self/other
      );
    }

    if (needsRender) {
      renderer.render(scene, camera);
      needsRender = false;
    }

    requestAnimationFrame(animate);
  }

  // --- Request player list at regular intervals even if not moving ---
  setInterval(() => {
    // Use last sent position if available
    if (lastSentX !== null && lastSentY !== null) {
      sendCoordinates(lastSentX, lastSentY);
    }
  }, 1200);

  animate();

</script>