@{
  Layout = "_EmptyLayout";
  ViewData["Title"] = "Game - " + ConfigurationSingleton.Instance.ApplicationName;
}

<script type="importmap">
  {
    "imports": {
      "three": "https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.module.js"
    }
  }
</script>

<p>Requires 51% vote of active IPs within any 5 minutes. Composite IP votes require 51% for that IP.</p>
<a href="/Home/StartWar" class="">Declare War</a>
<a href="/Home/Alliance" class="">Form Alliance</a>
<div id="app" class="width-100 height-500px margin-bottom-5px"></div>

<script type="module">
  // --- Config ---
  const width = 1920, height = 1080;
  const pixelSize = 1;
  const gridSize = 60;

  // --- User ID ---
  let userId = localStorage.getItem('userId');
  if (!userId) {
    userId = crypto.randomUUID();
    localStorage.setItem('userId', userId);
  }

  import * as THREE from 'three';
  import { initPlayers } from '/js/player.js'; // Adjust path if needed
  import { initRadar } from '/js/radar.js';   // Adjust path if needed
  import { initSectors } from '/js/sectors.js'; // Import your new sectors.js

  // --- Scene Setup ---
  const container = document.getElementById('app');
  const renderer = new THREE.WebGLRenderer({ antialias: false, alpha: false });
  renderer.setSize(width, height);
  renderer.setClearColor(0x20232a);
  container.appendChild(renderer.domElement);

  const scene = new THREE.Scene();
  const camera = new THREE.OrthographicCamera(0, width, height, 0, -1, 1);

  // --- Grid ---
  function createGrid(gridSize, color = 0x444444) {
    const gridLines = [];
    for (let x = 0; x <= width; x += gridSize) {
      gridLines.push(
        new THREE.Vector3(x, 0, 0),
        new THREE.Vector3(x, height, 0)
      );
    }
    for (let y = 0; y <= height; y += gridSize) {
      gridLines.push(
        new THREE.Vector3(0, y, 0),
        new THREE.Vector3(width, y, 0)
      );
    }
    const geometry = new THREE.BufferGeometry().setFromPoints(gridLines);
    const material = new THREE.LineBasicMaterial({ color: color, linewidth: 1 });
    return new THREE.LineSegments(geometry, material);
  }
  const grid = createGrid(gridSize, 0x444444);
  scene.add(grid);

  // --- Highlight Square ---
  const squareGeometry = new THREE.PlaneGeometry(gridSize, gridSize);
  const squareMaterial = new THREE.MeshBasicMaterial({
    color: 0xffff99,
    transparent: true,
    opacity: 0.32
  });
  const squareGlow = new THREE.Mesh(squareGeometry, squareMaterial);

  const borderGeometry = new THREE.PlaneGeometry(gridSize + 8, gridSize + 8);
  const borderMaterial = new THREE.MeshBasicMaterial({
    color: 0xffff99,
    transparent: true,
    opacity: 0.14
  });
  const squareBorder = new THREE.Mesh(borderGeometry, borderMaterial);

  squareGlow.position.set(-gridSize, -gridSize, 0.1);
  squareBorder.position.set(-gridSize, -gridSize, 0.09);
  scene.add(squareBorder);
  scene.add(squareGlow);

  // --- Crosshairs ---
  const crosshairMaterial = new THREE.LineBasicMaterial({ color: 0xff0000, linewidth: 2 });
  let verticalLine, horizontalLine;

  function createCrosshair(x, y) {
    const flippedY = height - y;
    if (verticalLine) scene.remove(verticalLine);
    if (horizontalLine) scene.remove(horizontalLine);

    const vertGeom = new THREE.BufferGeometry().setFromPoints([
      new THREE.Vector3(x, 0, 0.2),
      new THREE.Vector3(x, height, 0.2)
    ]);
    verticalLine = new THREE.Line(vertGeom, crosshairMaterial);

    const horizGeom = new THREE.BufferGeometry().setFromPoints([
      new THREE.Vector3(0, flippedY, 0.2),
      new THREE.Vector3(width, flippedY, 0.2)
    ]);
    horizontalLine = new THREE.Line(horizGeom, crosshairMaterial);

    scene.add(verticalLine);
    scene.add(horizontalLine);
  }

  // --- User Interaction State ---
  let mouseX = width / 2, mouseY = height / 2;
  let mouseOverCanvas = false;

  createCrosshair(mouseX, mouseY);

  function updateHighlight(x, y) {
    const col = Math.floor(x / gridSize);
    const row = Math.floor(y / gridSize);
    const squareX = col * gridSize + gridSize / 2;
    const squareY = height - (row * gridSize + gridSize / 2);
    squareGlow.position.set(squareX, squareY, 0.1);
    squareBorder.position.set(squareX, squareY, 0.09);
  }

  renderer.domElement.addEventListener('mousemove', (e) => {
    const rect = renderer.domElement.getBoundingClientRect();
    mouseX = Math.floor((e.clientX - rect.left) * (width / rect.width));
    mouseY = Math.floor((e.clientY - rect.top) * (height / rect.height));
    createCrosshair(mouseX, mouseY);
    updateHighlight(mouseX, mouseY);
    playerAPI.setNeedsRender(true);
  });
  renderer.domElement.addEventListener('mouseenter', () => {
    mouseOverCanvas = true;
  });
  renderer.domElement.addEventListener('mouseleave', () => {
    mouseOverCanvas = false;
  });

  // --- Player Logic via player.js ---
  const playerAPI = initPlayers({
    THREE,
    scene,
    width,
    height,
    pixelSize,
    userId
  });

  // --- Radar Logic via radar.js ---
  const radarAPI = initRadar({
    THREE,
    scene,
    width,
    height,
    scanWidth: 500,   // 200px wide radar band
    duration: 5000,   // 5 seconds for full sweep
    color: 0xff2222,
    opacity: 0.3,
    z: 0.4
  });

  // --- Sector Claims Logic via sectors.js ---
  const sectorsAPI = initSectors({
    THREE,
    scene,
    gridSize,
    width,
    height,
    color: 0x99ccff,   // Light blue for claimed sectors
    opacity: 0.25,
    z: 0.05
  });

  // Store latest sector claims
  let latestSectorClaims = [];

  // Fetch and update sector claims from API periodically
  async function fetchAndUpdateSectorClaims() {
    // Note: relies on backend sending SectorClaims array
    const response = await fetch('/api/player/report-position', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ x: mouseX, y: mouseY, userId, claim: false })
    });
    if (response.ok) {
      const data = await response.json();
      latestSectorClaims = (data.sectorClaims || data.SectorClaims) || [];
      // Update the visual sectors
      sectorsAPI.updateSectors(latestSectorClaims);
    }
  }

  // Initial fetch and then poll periodically
  fetchAndUpdateSectorClaims();
  setInterval(fetchAndUpdateSectorClaims, 1200);

  // Click to claim
  renderer.domElement.addEventListener('click', async (e) => {
    const rect = renderer.domElement.getBoundingClientRect();
    const clickX = Math.floor((e.clientX - rect.left) * (width / rect.width));
    const clickY = Math.floor((e.clientY - rect.top) * (height / rect.height));
    await playerAPI.handlePlayerClick(clickX, clickY);
    // Immediately refresh claims after a claim
    fetchAndUpdateSectorClaims();
  });

  // Movement reporting (claim: false)
  setInterval(() => {
    playerAPI.handlePlayerMove(mouseX, mouseY, mouseOverCanvas);
  }, 1000);

  updateHighlight(mouseX, mouseY);

  // --- Animation Loop ---
  function animate(now) {
    let needsRender = playerAPI.updatePlayers(now);

    // Radar: animate and apply bump effect
    radarAPI.updateRadar(playerAPI.getPlayerPixels(), now);

    // Sectors: updateSectors is called from fetch, meshes are persistent

    // Always re-render since radar/pixels or sectors may animate
    renderer.render(scene, camera);
    playerAPI.setNeedsRender(false);

    requestAnimationFrame(animate);
  }

  // --- Start Animation ---
  animate();
</script>