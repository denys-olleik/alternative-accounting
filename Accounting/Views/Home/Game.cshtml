@{
  Layout = "_EmptyLayout";
  ViewData["Title"] = "Game - " + ConfigurationSingleton.Instance.ApplicationName;
}

<script type="importmap">
  {
    "imports": {
      "three": "https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.module.js",
      "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/"
    }
  }
</script>

<div id="app" class="width-100 height-500px margin-bottom-5px"></div>

<script type="module">
  import * as THREE from 'three';

  // Set up renderer
  const width = 1920, height = 1080;
  const container = document.getElementById('app');
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(width, height);
  renderer.setClearColor(0x20232a);
  container.appendChild(renderer.domElement);

  // Set up scene and camera (note top=height, bottom=0)
  const scene = new THREE.Scene();
  const camera = new THREE.OrthographicCamera(0, width, height, 0, -1, 1);

  // Crosshair lines
  const material = new THREE.LineBasicMaterial({ color: 0xff0000, linewidth: 2 });
  let verticalLine, horizontalLine;

  function createCrosshair(x, y) {
    const flippedY = height - y;
    // Remove existing lines if present
    if (verticalLine) scene.remove(verticalLine);
    if (horizontalLine) scene.remove(horizontalLine);

    // Vertical line
    const vertGeom = new THREE.BufferGeometry().setFromPoints([
      new THREE.Vector3(x, 0, 0),
      new THREE.Vector3(x, height, 0)
    ]);
    verticalLine = new THREE.Line(vertGeom, material);

    // Horizontal line
    const horizGeom = new THREE.BufferGeometry().setFromPoints([
      new THREE.Vector3(0, flippedY, 0),
      new THREE.Vector3(width, flippedY, 0)
    ]);
    horizontalLine = new THREE.Line(horizGeom, material);

    scene.add(verticalLine);
    scene.add(horizontalLine);
  }

  // Initial crosshair in center
  let mouseX = width / 2, mouseY = height / 2;
  createCrosshair(mouseX, mouseY);

  // Mouse move handler
  renderer.domElement.addEventListener('mousemove', (e) => {
    const rect = renderer.domElement.getBoundingClientRect();
    mouseX = Math.floor((e.clientX - rect.left) * (width / rect.width));
    mouseY = Math.floor((e.clientY - rect.top) * (height / rect.height));
    createCrosshair(mouseX, mouseY);
    render();
  });

  // Render loop
  function render() {
    renderer.render(scene, camera);
  }
  render();
</script>