@{
  Layout = "_EmptyLayout";
  ViewData["Title"] = "Game - " + ConfigurationSingleton.Instance.ApplicationName;
}

<script type="importmap">
  {
    "imports": {
      "three": "https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.module.js"
    }
  }
</script>

<p>Requires 51% vote of active IPs within any 5 minutes. Composite IP votes require 51% for that IP.</p>
<a href="/Home/StartWar" class="">Declare War</a>
<a href="/Home/Alliance" class="">Form Alliance</a>
<div id="app" class="width-100 height-500px margin-bottom-5px"></div>

<script type="module">
  // --- Config ---
  const width = 1920, height = 1080;
  const pixelSize = 1;

  // --- User ID ---
  let userId = localStorage.getItem('userId');
  if (!userId) {
    userId = crypto.randomUUID();
    localStorage.setItem('userId', userId);
  }

  import * as THREE from 'three';
  import { initPlayers } from '/js/player.js'; // Adjust path if needed

  // --- Scene Setup ---
  const container = document.getElementById('app');
  const renderer = new THREE.WebGLRenderer({ antialias: false, alpha: false });
  renderer.setSize(width, height);
  renderer.setClearColor(0x20232a);
  container.appendChild(renderer.domElement);

  const scene = new THREE.Scene();
  const camera = new THREE.OrthographicCamera(0, width, height, 0, -1, 1);

  // --- Grid ---
  const gridSize = 60;

  function createGrid(gridSize, color = 0x444444) {
    const gridLines = [];
    for (let x = 0; x <= width; x += gridSize) {
      gridLines.push(
        new THREE.Vector3(x, 0, 0),
        new THREE.Vector3(x, height, 0)
      );
    }
    for (let y = 0; y <= height; y += gridSize) {
      gridLines.push(
        new THREE.Vector3(0, y, 0),
        new THREE.Vector3(width, y, 0)
      );
    }
    const geometry = new THREE.BufferGeometry().setFromPoints(gridLines);
    const material = new THREE.LineBasicMaterial({ color: color, linewidth: 1 });
    return new THREE.LineSegments(geometry, material);
  }
  const grid = createGrid(gridSize, 0x444444);
  scene.add(grid);

  // --- Highlight Square ---
  const squareGeometry = new THREE.PlaneGeometry(gridSize, gridSize);
  const squareMaterial = new THREE.MeshBasicMaterial({
    color: 0xffff99,
    transparent: true,
    opacity: 0.32
  });
  const squareGlow = new THREE.Mesh(squareGeometry, squareMaterial);

  const borderGeometry = new THREE.PlaneGeometry(gridSize + 8, gridSize + 8);
  const borderMaterial = new THREE.MeshBasicMaterial({
    color: 0xffff99,
    transparent: true,
    opacity: 0.14
  });
  const squareBorder = new THREE.Mesh(borderGeometry, borderMaterial);

  squareGlow.position.set(-gridSize, -gridSize, 0.1);
  squareBorder.position.set(-gridSize, -gridSize, 0.09);
  scene.add(squareBorder);
  scene.add(squareGlow);

  // --- Crosshairs ---
  const crosshairMaterial = new THREE.LineBasicMaterial({ color: 0xff0000, linewidth: 2 });
  let verticalLine, horizontalLine;

  function createCrosshair(x, y) {
    const flippedY = height - y;
    if (verticalLine) scene.remove(verticalLine);
    if (horizontalLine) scene.remove(horizontalLine);

    const vertGeom = new THREE.BufferGeometry().setFromPoints([
      new THREE.Vector3(x, 0, 0.2),
      new THREE.Vector3(x, height, 0.2)
    ]);
    verticalLine = new THREE.Line(vertGeom, crosshairMaterial);

    const horizGeom = new THREE.BufferGeometry().setFromPoints([
      new THREE.Vector3(0, flippedY, 0.2),
      new THREE.Vector3(width, flippedY, 0.2)
    ]);
    horizontalLine = new THREE.Line(horizGeom, crosshairMaterial);

    scene.add(verticalLine);
    scene.add(horizontalLine);
  }

  // --- User Interaction State ---
  let mouseX = width / 2, mouseY = height / 2;
  let mouseOverCanvas = false;

  createCrosshair(mouseX, mouseY);

  function updateHighlight(x, y) {
    const col = Math.floor(x / gridSize);
    const row = Math.floor(y / gridSize);
    const squareX = col * gridSize + gridSize / 2;
    const squareY = height - (row * gridSize + gridSize / 2);
    squareGlow.position.set(squareX, squareY, 0.1);
    squareBorder.position.set(squareX, squareY, 0.09);
  }

  renderer.domElement.addEventListener('mousemove', (e) => {
    const rect = renderer.domElement.getBoundingClientRect();
    mouseX = Math.floor((e.clientX - rect.left) * (width / rect.width));
    mouseY = Math.floor((e.clientY - rect.top) * (height / rect.height));
    createCrosshair(mouseX, mouseY);
    updateHighlight(mouseX, mouseY);
    playerAPI.setNeedsRender(true);
  });
  renderer.domElement.addEventListener('mouseenter', () => {
    mouseOverCanvas = true;
  });
  renderer.domElement.addEventListener('mouseleave', () => {
    mouseOverCanvas = false;
  });

  // --- Player Logic via player.js ---
  const playerAPI = initPlayers({
    THREE,
    scene,
    width,
    height,
    pixelSize,
    userId
  });

  // Click to claim
  renderer.domElement.addEventListener('click', async (e) => {
    const rect = renderer.domElement.getBoundingClientRect();
    const clickX = Math.floor((e.clientX - rect.left) * (width / rect.width));
    const clickY = Math.floor((e.clientY - rect.top) * (height / rect.height));
    await playerAPI.handlePlayerClick(clickX, clickY);
  });

  // Movement reporting (claim: false)
  setInterval(() => {
    playerAPI.handlePlayerMove(mouseX, mouseY, mouseOverCanvas);
  }, 1000);

  updateHighlight(mouseX, mouseY);

  // ==== Radar Scan Logic ====

  // Radar constants
  const radarDuration = 5000; // ms per sweep (5 seconds)
  const radarLineColor = 0xff2222;
  const radarLineWidth = 1; // 1 pixel

  // Radar state
  let radarLineMesh = null;
  let radarLastSweepId = 0;

  // For bump effect
  // Map: pixelId => { bumpStart: timestamp }
  const pixelBumps = new Map();

  // Create the radar line mesh (vertical line)
  function createRadarLine() {
    if (radarLineMesh) scene.remove(radarLineMesh);
    const geom = new THREE.PlaneGeometry(radarLineWidth, height);
    const mat = new THREE.MeshBasicMaterial({
      color: radarLineColor,
      transparent: true,
      opacity: 0.5,
      depthTest: false
    });
    radarLineMesh = new THREE.Mesh(geom, mat);
    radarLineMesh.position.set(-100, height / 2, 0.4); // Start offscreen
    scene.add(radarLineMesh);
  }
  createRadarLine();

  // --- Animation Loop ---
  function animate(now) {
    let needsRender = playerAPI.updatePlayers(now);

    // --- Radar effect ---
    const t = performance.now();
    const cycleTime = t % radarDuration;
    const sweepId = Math.floor(t / radarDuration);
    const radarX = Math.floor((cycleTime / radarDuration) * width);

    // Move radar line
    if (radarLineMesh) {
      radarLineMesh.position.set(radarX + 0.5, height / 2, 0.4); // +0.5 center
      needsRender = true;
    }

    // Get playerPixels from player.js cleanly
    const playerPixels = playerAPI.getPlayerPixels();

    // Bump logic: for each pixel, if its X matches radarX, bump it (once per sweep)
    if (playerPixels) {
      for (const [id, pixel] of playerPixels) {
        // Each pixel's mesh position.x is in scene units (float, centered)
        // But pixels are at integer X
        const meshX = Math.round(pixel.mesh.position.x - 0.5);
        if (meshX === radarX) {
          if (!pixelBumps.has(id) || pixelBumps.get(id).lastSweepId !== sweepId) {
            pixelBumps.set(id, { bumpStart: t, lastSweepId: sweepId });
          }
        }
      }
    }

    // --- Animate bumps ---
    const bumpDuration = 1000; // ms
    if (playerPixels) {
      for (const [id, pixel] of playerPixels) {
        const bump = pixelBumps.get(id);
        if (bump) {
          const dt = t - bump.bumpStart;
          if (dt < bumpDuration) {
            // Bump scale: ease out from 2.5x down to 1x over 1s
            const scale = 1 + 1.5 * (1 - dt / bumpDuration);
            pixel.mesh.scale.set(scale, scale, 1);
            needsRender = true;
          } else {
            // Reset scale after bump
            pixel.mesh.scale.set(1, 1, 1);
            pixelBumps.delete(id);
            needsRender = true;
          }
        } else {
          // Ensure scale is normal if not bumping
          if (pixel.mesh.scale.x !== 1 || pixel.mesh.scale.y !== 1) {
            pixel.mesh.scale.set(1, 1, 1);
            needsRender = true;
          }
        }
      }
    }

    requestAnimationFrame(animate);

    if (needsRender) {
      renderer.render(scene, camera);
      playerAPI.setNeedsRender(false);
    }
  }

  // --- Start Animation ---
  animate();
</script>