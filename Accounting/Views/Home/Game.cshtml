@{
  Layout = "_EmptyLayout";
  ViewData["Title"] = "Game - " + ConfigurationSingleton.Instance.ApplicationName;
}

<script type="importmap">
  {
    "imports": {
      "three": "https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.module.js"
    }
  }
</script>

<div id="app" class="width-100 height-500px margin-bottom-5px"></div>

<script type="module">
  // --- Config ---
  const width = 1920, height = 1080;
  const pixelSize = 1;

  // --- User ID ---
  let userId = localStorage.getItem('userId');
  if (!userId) {
    userId = crypto.randomUUID();
    localStorage.setItem('userId', userId);
  }

  import * as THREE from 'three';

  // --- Scene Setup ---
  const container = document.getElementById('app');
  const renderer = new THREE.WebGLRenderer({ antialias: false, alpha: false });
  renderer.setSize(width, height);
  renderer.setClearColor(0x20232a);
  container.appendChild(renderer.domElement);

  const scene = new THREE.Scene();
  const camera = new THREE.OrthographicCamera(0, width, height, 0, -1, 1);

  // --- Grid ---
  // Updated gridSize to 60 (GCD of 1920 and 1080)
  const gridSize = 60;

  function createGrid(gridSize, color = 0x444444) {
    const gridLines = [];
    for (let x = 0; x <= width; x += gridSize) {
      gridLines.push(
        new THREE.Vector3(x, 0, 0),
        new THREE.Vector3(x, height, 0)
      );
    }
    for (let y = 0; y <= height; y += gridSize) {
      gridLines.push(
        new THREE.Vector3(0, y, 0),
        new THREE.Vector3(width, y, 0)
      );
    }
    const geometry = new THREE.BufferGeometry().setFromPoints(gridLines);
    const material = new THREE.LineBasicMaterial({ color: color, linewidth: 1 });
    return new THREE.LineSegments(geometry, material);
  }
  const grid = createGrid(gridSize, 0x444444);
  scene.add(grid);

  // --- Highlight Square ---
  const squareGeometry = new THREE.PlaneGeometry(gridSize, gridSize);
  const squareMaterial = new THREE.MeshBasicMaterial({
    color: 0xffff99,
    transparent: true,
    opacity: 0.32
  });
  const squareGlow = new THREE.Mesh(squareGeometry, squareMaterial);

  const borderGeometry = new THREE.PlaneGeometry(gridSize + 8, gridSize + 8);
  const borderMaterial = new THREE.MeshBasicMaterial({
    color: 0xffff99,
    transparent: true,
    opacity: 0.14
  });
  const squareBorder = new THREE.Mesh(borderGeometry, borderMaterial);

  squareGlow.position.set(-gridSize, -gridSize, 0.1);
  squareBorder.position.set(-gridSize, -gridSize, 0.09);
  scene.add(squareBorder);
  scene.add(squareGlow);

  // --- Crosshairs ---
  const crosshairMaterial = new THREE.LineBasicMaterial({ color: 0xff0000, linewidth: 2 });
  let verticalLine, horizontalLine;

  function createCrosshair(x, y) {
    const flippedY = height - y;
    if (verticalLine) scene.remove(verticalLine);
    if (horizontalLine) scene.remove(horizontalLine);

    const vertGeom = new THREE.BufferGeometry().setFromPoints([
      new THREE.Vector3(x, 0, 0.2),
      new THREE.Vector3(x, height, 0.2)
    ]);
    verticalLine = new THREE.Line(vertGeom, crosshairMaterial);

    const horizGeom = new THREE.BufferGeometry().setFromPoints([
      new THREE.Vector3(0, flippedY, 0.2),
      new THREE.Vector3(width, flippedY, 0.2)
    ]);
    horizontalLine = new THREE.Line(horizGeom, crosshairMaterial);

    scene.add(verticalLine);
    scene.add(horizontalLine);
  }

  // --- User Interaction State ---
  let mouseX = width / 2, mouseY = height / 2;
  let mouseOverCanvas = false;

  createCrosshair(mouseX, mouseY);

  function updateHighlight(x, y) {
    const col = Math.floor(x / gridSize);
    const row = Math.floor(y / gridSize);
    const squareX = col * gridSize + gridSize / 2;
    const squareY = height - (row * gridSize + gridSize / 2);
    squareGlow.position.set(squareX, squareY, 0.1);
    squareBorder.position.set(squareX, squareY, 0.09);
  }

  renderer.domElement.addEventListener('mousemove', (e) => {
    const rect = renderer.domElement.getBoundingClientRect();
    mouseX = Math.floor((e.clientX - rect.left) * (width / rect.width));
    mouseY = Math.floor((e.clientY - rect.top) * (height / rect.height));
    createCrosshair(mouseX, mouseY);
    updateHighlight(mouseX, mouseY);
    needsRender = true;
  });
  renderer.domElement.addEventListener('mouseenter', () => {
    mouseOverCanvas = true;
  });
  renderer.domElement.addEventListener('mouseleave', () => {
    mouseOverCanvas = false;
  });

  // --- Click to Claim ---
  renderer.domElement.addEventListener('click', async (e) => {
    const rect = renderer.domElement.getBoundingClientRect();
    const clickX = Math.floor((e.clientX - rect.left) * (width / rect.width));
    const clickY = Math.floor((e.clientY - rect.top) * (height / rect.height));
    // Send position with claim: true
    await sendCoordinates(clickX, clickY, true);
    lastSentX = clickX;
    lastSentY = clickY;
  });

  updateHighlight(mouseX, mouseY);

  // --- Player Data Structures ---
  // userId -> { mesh, anim: {from:{x,y}, to:{x,y}, start:timestamp, duration:ms} }
  const playerPixels = new Map();

  // --- Helpers ---
  function lerp(a, b, t) {
    return a + (b - a) * t;
  }

  // --- Player Polling ---
  let latestPlayersFromServer = [];
  let lastSentX = null, lastSentY = null;

  // Modified: claim parameter (default false)
  async function sendCoordinates(x, y, claim = false) {
    try {
      const response = await fetch('/api/player/report-position', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ x, y, userId, claim })
      });
      if (response.ok) {
        const data = await response.json();
        let list = data.players || data.Players;
        if (Array.isArray(list)) {
          latestPlayersFromServer = list.map((p, i) => ({
            x: p.x ?? p.X,
            y: p.y ?? p.Y,
            userId: p.userId || p.UserId || null
          }));
          needsRender = true;
        }
      }
    } catch (err) {}
  }

  // Movement reporting (claim: false)
  setInterval(() => {
    if (mouseOverCanvas) {
      if (mouseX !== lastSentX || mouseY !== lastSentY) {
        sendCoordinates(mouseX, mouseY, false);
        lastSentX = mouseX;
        lastSentY = mouseY;
      }
    }
  }, 1000);

  setInterval(() => {
    if (lastSentX !== null && lastSentY !== null) {
      sendCoordinates(lastSentX, lastSentY, false);
    }
  }, 1200);

  // --- Animation Loop ---
  let needsRender = true;

  function animate(now) {
    now = now || performance.now();

    // 1. Remove pixels not in latest player list
    const keepIds = new Set();
    for (let i = 0; i < latestPlayersFromServer.length; ++i) {
      const p = latestPlayersFromServer[i];
      let id = p.userId || (p.x + ':' + p.y + ':' + i);
      keepIds.add(id);
    }
    for (const [id, pixel] of playerPixels) {
      if (!keepIds.has(id)) {
        scene.remove(pixel.mesh);
        playerPixels.delete(id);
        needsRender = true;
      }
    }

    // 2. Update/create player pixels and animation targets
    for (let i = 0; i < latestPlayersFromServer.length; ++i) {
      const p = latestPlayersFromServer[i];
      const id = p.userId || (p.x + ':' + p.y + ':' + i);
      const isSelf = (id === userId);
      const targetAbsPos = {
        x: p.x + 0.5, // center of pixel
        y: height - p.y - 0.5 // flip Y, center of pixel
      };

      let pixel = playerPixels.get(id);

      if (!pixel) {
        // Create mesh at target (no animation on first appearance)
        const mesh = new THREE.Mesh(
          new THREE.PlaneGeometry(pixelSize, pixelSize),
          new THREE.MeshBasicMaterial({
            color: isSelf ? 0x44ff44 : 0xffffff,
            opacity: 1,
            transparent: false,
            depthTest: false
          })
        );
        mesh.position.set(targetAbsPos.x, targetAbsPos.y, isSelf ? 0.25 : 0.2);
        scene.add(mesh);
        playerPixels.set(id, {
          mesh,
          anim: {
            from: { x: targetAbsPos.x, y: targetAbsPos.y },
            to: { x: targetAbsPos.x, y: targetAbsPos.y },
            start: now,
            duration: 1000
          }
        });
        needsRender = true;
      } else {
        // Only start new animation if destination changed
        const prevTo = pixel.anim.to;
        if (prevTo.x !== targetAbsPos.x || prevTo.y !== targetAbsPos.y) {
          // Continue from wherever it is (even if in the middle of anim)
          let t = Math.min(1, (now - pixel.anim.start) / pixel.anim.duration);
          const curX = lerp(pixel.anim.from.x, pixel.anim.to.x, t);
          const curY = lerp(pixel.anim.from.y, pixel.anim.to.y, t);

          pixel.anim = {
            from: { x: curX, y: curY },
            to: { x: targetAbsPos.x, y: targetAbsPos.y },
            start: now,
            duration: 1000
          };
          needsRender = true;
        }
      }
    }

    // 3. Animate all player pixels
    for (const [id, pixel] of playerPixels) {
      let t = Math.min(1, (now - pixel.anim.start) / pixel.anim.duration);
      if (t < 1) {
        const curX = lerp(pixel.anim.from.x, pixel.anim.to.x, t);
        const curY = lerp(pixel.anim.from.y, pixel.anim.to.y, t);
        pixel.mesh.position.set(curX, curY, pixel.mesh.position.z);
        needsRender = true;
      } else {
        pixel.mesh.position.set(pixel.anim.to.x, pixel.anim.to.y, pixel.mesh.position.z);
      }
      // Color for self vs others
      if (id === userId) {
        pixel.mesh.material.color.setHex(0x44ff44);
      } else {
        pixel.mesh.material.color.setHex(0xffffff);
      }
    }

    if (needsRender) {
      renderer.render(scene, camera);
      needsRender = false;
    }

    requestAnimationFrame(animate);
  }

  animate();
</script>