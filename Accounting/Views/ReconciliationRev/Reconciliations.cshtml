@model Accounting.Models.ReconciliationViewModels.ReconciliationsPaginatedViewModel

@{
	ViewData["Title"] = "Reconciliations - " + ConfigurationSingleton.Instance.ApplicationName;
}

@{
	string headerText = "Reconciliations";
}

<partial name="_H1HeaderPartial" model="@headerText" />

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>

<div class="display-flex margin-bottom-5px background-color-antiquewhite">
	<div class="margin-left-20px">
		<a asp-action="Create" asp-controller="ReconciliationRev" class="font-Roboto font-size-16px color-blue">Create</a>
	</div>
	<div class="flex-1 text-align-right">
		<a asp-action="Index" asp-controller="Home"
			class="font-Roboto font-size-16px color-blue margin-left-20px">Home</a>
	</div>
</div>

<div id="app">
	<table class="border-collapse width-100 margin-bottom-5px background-color-antiquewhite">
		<thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
			<tr>
				<th class="text-align-left width-1px padding-right-20px fitwidth">#</th>
				<th class="text-align-left width-1px padding-right-20px">Name</th>
				<th class="text-align-left padding-right-20px">Instruction</th>
				<th class="text-align-right width-1px">Status</th>
			</tr>
		</thead>
		<tbody class="font-Roboto-Mono">
			<tr v-for="reconciliation in reconciliations" :key="reconciliation.reconciliationID">
				<td class="padding-right-20px">{{ reconciliation.rowNumber }}</td>
				<td class="padding-right-20px white-space-nowrap">{{ reconciliation.name }}</td>
				<td class="padding-right-20px"></td>
				<td class="text-align-right white-space-nowrap">{{ reconciliation.status }}</td>
			</tr>
		</tbody>
	</table>
</div>

<script>
	const { createApp } = Vue;

	const app = createApp({
		data() {
			return {
				reconciliations: [],
				page: @Model.Page,
				pageSize: @Model.PageSize,
				nextPage: null,
				rememberPageSize: @(Model.RememberPageSize ? "true" : "false")
			};
		},
		methods: {
			fetchReconciliations() {
				const storedPageSize = parseInt(localStorage.getItem('pageSize'));
				if (storedPageSize) {
					this.pageSize = storedPageSize;
				}
				let apiUrl;

				if (this.reconciliationFilter) {
					apiUrl = `/api/rclrev/get-reconciliations-filtered?search=${encodeURIComponent(this.reconciliationFilter)}`;
				} else {
				  apiUrl = `/api/rclrev/get-reconciliations?page=${this.page}&pageSize=${this.pageSize}`;
				}

				fetch(apiUrl)
					.then(response => response.json())
					.then(data => {
						this.reconciliations = data.reconciliations;
						if (!this.reconciliationFilter) {
							if (data.page > 0) {
								this.page = data.page;
							}
							if (data.nextPage > 0) {
								this.nextPage = data.nextPage;
							}
						}
					});
			}
		},
		mounted() {
			if (this.rememberPageSize) {
				localStorage.setItem('pageSize', this.pageSize);
			}
			this.fetchReconciliations();
		}
	});

	app.mount('#app');
</script>