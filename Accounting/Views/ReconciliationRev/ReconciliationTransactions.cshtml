@model Accounting.Models.ReconciliationViewModels.ReconciliationTransactionsPaginatedViewModel

@{
  ViewData["Title"] = Model.Name + " - Reconciliation transactions - " + ConfigurationSingleton.Instance.ApplicationName;
  string headerText = Model.Name + " - Reconciliation transactions";
}

<partial name="_H1HeaderPartial" model="@headerText" />

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>

<div class="display-flex margin-bottom-5px background-color-antiquewhite">
  <div class="margin-left-20px flex-1 text-align-right">
    <a asp-action="Reconciliations" asp-controller="ReconciliationRev" class="font-Roboto font-size-16px color-blue">Reconciliations</a>
    <a asp-action="Index" asp-controller="Home" class="font-Roboto font-size-16px color-blue margin-left-20px">Home</a>
  </div>
</div>



<div id="app">
  <div class="display-flex margin-bottom-5px">
    <div class="flex-1 display-flex flex-direction-column background-color-antiquewhite">
      <label class="font-size-16px">Debit</label>
      <select-account-dropdown :accounts="accounts" :selected-account="selectedDebitAccount" @@account-selected="debitAccountSelected">
      </select-account-dropdown>
    </div>
    <div class="width-5px"></div>
    <div class="flex-1 display-flex flex-direction-column background-color-antiquewhite">
      <label class="font-size-16px">Credit</label>
      <select-account-dropdown :accounts="accounts" :selected-account="selectedCreditAccount" @@account-selected="creditAccountSelected">
      </select-account-dropdown>
    </div>
  </div>

  <table class="border-collapse width-100 margin-bottom-5px background-color-antiquewhite">
    <thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
      <tr>
        <th class="text-align-left width-1px padding-right-20px">#</th>
        <th class="text-align-left width-1px padding-right-20px">Date</th>
        <th class="text-align-left padding-right-20px">Description</th>
        <th class="text-align-right width-1px padding-right-20px">Amount</th>
        <th class="text-align-right width-1px">Instruction</th>
      </tr>
    </thead>
    <tbody class="font-Roboto-Mono">
      <tr v-for="reconciliationTransaction in reconciliationTransactions" :key="reconciliationTransaction.reconciliationTransactionID">
        <td class="padding-right-20px">{{ reconciliationTransaction.rowNumber }}</td>
        <td class="padding-right-20px white-space-nowrap">{{ reconciliationTransaction.transactionDate }}</td>
        <td class="padding-right-20px white-space-nowrap">{{ reconciliationTransaction.description }}</td>
        <td class="padding-right-20px text-align-right white-space-nowrap">{{ reconciliationTransaction.amount }}</td>
        <td class="white-space-nowrap text-align-center">
          <template v-if="!reconciliationTransaction.reconciliationInstruction || reconciliationTransaction.reconciliationInstruction.trim() === ''">
            <a href="#" class="color-grey">none</a>
          </template>
          <template v-else>
            {{ reconciliationTransaction.reconciliationInstruction }}
          </template>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<script src="~/js/SelectAccountDropdown.js" asp-append-version="true"></script>

<script>
  const { createApp } = Vue;

  const app = createApp({
    components: {
      'select-account-dropdown': SelectAccountDropdown
    },
    data() {
      return {
        reconciliationId: @Model.ReconciliationID,
        reconciliationTransactions: [],
        accounts: @Html.Raw(Json.Serialize(Model.Accounts).ToString() ?? "[]"),
        selectedDebitAccount: null,
        selectedCreditAccount: null,
        page: @Model.Page,
        pageSize: @Model.PageSize,
        nextPage: null,
        rememberPageSize: @(Model.RememberPageSize ? "true" : "false")
      };
    },
    methods: {
      fetchReconciliationTransactions() {
        const storedPageSize = parseInt(localStorage.getItem('pageSize'));
        if (storedPageSize) {
          this.pageSize = storedPageSize;
        }
        let apiUrl;

        if (this.reconciliationFilter) {
          apiUrl = `/api/rclrev/get-reconciliation-transactions-filtered?reconciliationId=${this.reconciliationId}&search=${encodeURIComponent(this.reconciliationFilter)}`;
        } else {
          apiUrl = `/api/rclrev/get-reconciliation-transactions?reconciliationId=${this.reconciliationId}&page=${this.page}&pageSize=${this.pageSize}`;
        }

        fetch(apiUrl)
          .then(response => response.json())
          .then(data => {
            this.reconciliationTransactions = data.reconciliationTransactions;
            if (!this.reconciliationFilter) {
              if (data.page > 0) {
                this.page = data.page;
              }
              if (data.nextPage > 0) {
                this.nextPage = data.nextPage;
              }
            }
          });
      },
      debitAccountSelected(selectedDebitAccount) {
        this.selectedDebitAccount = selectedDebitAccount;
      },
      creditAccountSelected(selectedCreditAccount) {
        this.selectedCreditAccount = selectedCreditAccount;
      },
    },
    mounted() {
      if (this.rememberPageSize) {
        localStorage.setItem('pageSize', this.pageSize);
      }
      this.fetchReconciliationTransactions();
    },
  });

  app.mount('#app');
</script>