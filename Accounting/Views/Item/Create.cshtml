@using Accounting.Business
@model Accounting.Models.Item.CreateItemViewModel

@{
  ViewData["Title"] = "Create product or service - " + ConfigurationSingleton.Instance.ApplicationName;
}

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>

@{
  string headerText = "Create product or service";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<template id="item-type-selector-template">
  <select v-model="selectedItemType" name="SelectedItemType" class="font-size-20px width-100">
    <option value="">Select item type</option>
    <option v-for="itemType in itemTypes" :value="itemType">{{ itemType }}</option>
  </select>
</template>

<form id="app" asp-action="Create" asp-controller="Item" method="post" class="display-flex flex-direction-column margin-bottom-5px">
  <input type="hidden" asp-for="ParentItemId" />
  <input type="hidden" name="SelectedCreditAccountId" v-model="selectedCreditAccountId" />
  <input type="hidden" name="SelectedDebitAccountId" v-model="selectedDebitAccountId" />

  @if (Model.ParentItemId != null)
  {
    <div class="display-flex margin-bottom-5px background-color-antiquewhite">
      <div>Parent Item:</div>
      <div class="display-flex flex-direction-column">
        <a asp-action="Update"
           asp-controller="Item"
           asp-route-accountId="@Model.ParentItemId"
           class="font-Roboto-Mono margin-left-5px">@Model.ParentItem.Name</a>
      </div>
    </div>
  }

  <div class="display-flex flex-direction-column margin-bottom-5px">

    <label asp-for="Name" class="background-color-antiquewhite"></label>
    <input asp-for="Name"
           class="font-size-20px"
           maxlength="100" autocomplete="off" />
  </div>
  <div class="display-flex flex-direction-column margin-bottom-5px">
    <label asp-for="Description" class="background-color-antiquewhite"></label>
    <textarea asp-for="Description" class="font-size-20px" rows="6"></textarea>
  </div>

  <div class="display-flex flex-direction-column margin-bottom-5px">
    <label asp-for="Quantity" class="background-color-antiquewhite">Invoice quantity</label>
    <input asp-for="Quantity" type="number" step="0.01" class="font-size-20px" />
  </div>

  <div class="display-flex flex-direction-column margin-bottom-5px">
    <label asp-for="AssemblyQuantity" class="background-color-antiquewhite">Assembly quantity</label>
    <input asp-for="AssemblyQuantity" type="number" step="0.01" class="font-size-20px" />
  </div>

  <div class="display-flex flex-1 flex-direction-column margin-bottom-5px">
    <label for="SellFor" class="background-color-antiquewhite">Sell for</label>
    <input asp-for="SellFor" type="number" step="0.01" class="width-100 font-size-20px" v-model="sellFor" />
  </div>

  <div class="display-flex flex-direction-column margin-bottom-5px">
    <label class="background-color-antiquewhite">Item type</label>
    <item-type-selector :item-types="itemTypes"></item-type-selector>
  </div>


  <div class="display-flex flex-direction-column margin-bottom-5px">
    <label class="background-color-antiquewhite">Inventory method</label>
    <select asp-for="SelectedInventoryMethod" class="font-size-20px width-100">
      @foreach (var method in Model.AvailableInventoryMethods)
      {
        if ((Model.SelectedInventoryMethod == method) || (Model.SelectedInventoryMethod == null && method == Item.InventoryMethods.Any))
        {
          <option value="@method" selected>@method</option>
        }
        else
        {
          <option value="@method">@method</option>
        }
      }
    </select>
  </div>

  <div class="margin-bottom-5px background-color-antiquewhite">
    <label>Increase (credit) this revenue account during revenue recognition for this item.</label>
    <universal-selector :items="accounts"
                        :selected-items="selectedCreditAccount"
                        label="Credit account"
                        placeholder="Search accounts"
                        item-key="accountID"
                        item-label="name"
                        :single-select="true"
                        @@update:selected-items="selectedCreditAccount = $event">
    </universal-selector>
  </div>

  <div class="margin-bottom-5px background-color-antiquewhite">
    <label>Increase (debit) this asset account, usually accounts-receivable, check-in-transit, cash, etc.</label>
    <universal-selector :items="accounts"
                        :selected-items="selectedDebitAccount"
                        label="Debit account"
                        placeholder="Search accounts"
                        item-key="accountID"
                        item-label="name"
                        :single-select="true"
                        @@update:selected-items="selectedDebitAccount = $event">
    </universal-selector>
  </div>

  <button type="submit" class="full-width-regular-button">Create product or service</button>
</form>

<script src="~/js/UniversalSelector.js" asp-append-version="true"></script>

@if (Model != null && Model.ValidationResult != null)
{
  foreach (var error in Model.ValidationResult.Errors)
  {
    <div>
      <small class="color-red">@error.ErrorMessage</small>
    </div>
  }
  <div class="margin-bottom-5px">
  </div>
}

<script>
  const { createApp } = Vue;

  // Keep ItemTypeSelector as-is
  const ItemTypeSelector = {
    name: 'ItemTypeSelector',
    template: '#item-type-selector-template',
    props: ['itemTypes'],
    data() {
      return {
        selectedItemType: '@Model.SelectedItemType' || '',
      };
    },
  };

  // Load UniversalSelector, then create and mount the app so the component is available
  createUniversalSelectorComponent().then(UniversalSelector => {
    const app = createApp({
      components: {
        'item-type-selector': ItemTypeSelector,
        'universal-selector': UniversalSelector
      },
      data() {
        return {
          accounts: @Html.Raw(Json.Serialize(Model!.Accounts)),
          // Initialize arrays with IDs only (we'll resolve to full objects in mounted)
          selectedCreditAccount: @Html.Raw(Model.SelectedDebitAccountId.HasValue ? $"[{{\"accountID\": {Model.SelectedDebitAccountId.Value} }}]" : "[]"),
          selectedDebitAccount: @Html.Raw(Model.SelectedCreditAccountId.HasValue ? $"[{{\"accountID\": {Model.SelectedCreditAccountId.Value} }}]" : "[]"),
          itemTypes: @Html.Raw(Json.Serialize(Model.AvailableItemTypes)),
          selectedItemType: '@Model.SelectedItemType' || '',
          sellFor: 0.0,
          parentItemId: @Html.Raw(Model.ParentItemId.HasValue ? Model.ParentItemId.Value.ToString() : "null"),
          // Hidden-field mirrors (will be set via watchers/computed below)
          selectedDebitAccountId: @Html.Raw(Model.SelectedDebitAccountId.HasValue ? Model.SelectedDebitAccountId.Value.ToString() : "null"),
          selectedCreditAccountId: @Html.Raw(Model.SelectedCreditAccountId.HasValue ? Model.SelectedCreditAccountId.Value.ToString() : "null"),
        };
      },
      computed: {
        // If you prefer, you can bind hidden inputs directly to these:
        creditAccountId() {
          return this.selectedCreditAccount?.[0]?.accountID ?? null;
        },
        debitAccountId() {
          return this.selectedDebitAccount?.[0]?.accountID ?? null;
        }
      },
      watch: {
        // Keep hidden field values in sync with selector arrays
        selectedCreditAccount: {
          immediate: true,
          handler(val) {
            this.selectedDebitAccountId = val?.[0]?.accountID ?? null;
          }
        },
        selectedDebitAccount: {
          immediate: true,
          handler(val) {
            this.selectedCreditAccountId = val?.[0]?.accountID ?? null;
          }
        }
      },
      methods: {
        // Resolve initial ID-only entries to full account objects so UniversalSelector can display labels
        resolveInitialSelections() {
          const byId = new Map(this.accounts.map(a => [a.accountID, a]));

          if (this.selectedCreditAccount.length === 1) {
            const id = this.selectedCreditAccount[0]?.accountID;
            const obj = byId.get(id);
            this.selectedCreditAccount = obj ? [obj] : [];
          }

          if (this.selectedDebitAccount.length === 1) {
            const id = this.selectedDebitAccount[0]?.accountID;
            const obj = byId.get(id);
            this.selectedDebitAccount = obj ? [obj] : [];
          }
        }
      },
      mounted() {
        // Convert initial ID placeholders into full objects for display
        this.resolveInitialSelections();
      }
    });

    app.mount('#app');
  });
</script>