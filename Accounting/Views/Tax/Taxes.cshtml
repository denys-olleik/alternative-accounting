@model Accounting.Models.TaxViewModels.TaxesPaginatedViewModel

@{
  ViewData["Title"] = "Taxes - " + ConfigurationSingleton.Instance.ApplicationName;
}

@{
  string headerText = "Taxes";
}

<partial name="_H1HeaderPartial" model="@headerText" />

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>

<template id="taxes-action-template">
  <div class="display-flex padding-top-bottom-2px">
    <div class="display-flex flex-1">
      <a href="#" @@click.prevent="toggleAction" class="margin-right-5px">{{ taxes.name }}</a>
      <span v-if="isExpanded" class="display-flex">
        <div class="display-flex flex-direction-column background-color-333333 padding-left-5px padding-right-5px">
          <div class="flex-1"></div>
          <a class="font-size-12px font-Roboto color-white text-decoration-none cursor-default">options:</a>
          <div class="flex-1"></div>
        </div>
        <div class="display-flex
            flex-direction-column
            background-color-333333
            padding-right-5px
            padding-left-5px
            margin-left-2px">
          <div class="flex-1"></div>
          <a :href="'/t/update/' + taxes.taxID"
             class="font-size-16px font-Roboto color-white text-decoration-none">
            update
          </a>
          <div class="flex-1"></div>
        </div>
      </span>
    </div>
  </div>
</template>

<div class="display-flex margin-bottom-5px background-color-antiquewhite">
  <div class="margin-left-20px">
    <a asp-action="Create" asp-controller="Tax" class="font-Roboto font-size-16px color-blue">Create tax</a>
  </div>
  <div class="flex-1 text-align-right">
    <a asp-action="Index" asp-controller="Home"
       class="font-Roboto font-size-16px color-blue margin-left-20px">Home</a>
  </div>
</div>

<div id="app">
  <table class="border-collapse width-100 margin-bottom-5px background-color-antiquewhite">
    <thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
    <tr>
      <th class="text-align-left width-1px padding-right-20px">#</th>
      <th class="text-align-left padding-right-20px">Name</th>
      <th class="text-align-left width-1px padding-right-20px">Rate</th>
      <th class="text-align-left width-1px padding-right-20px">Item</th>
      <th class="text-align-left width-1px padding-right-20px">Account</th>
      <th class="text-align-left width-1px">Location</th>
    </tr>
    </thead>
    <tbody class="font-Roboto-Mono">
    <template v-for="tax in taxes" :key="tax.taxID">
      <tr>
        <td class="padding-right-20px">{{ tax.rowNumber }}</td>
        <td class="padding-right-20px">
          <taxes-action :taxes="tax" :is-expanded="tax.taxID === expandedTaxId" @@expand="handleTaxExpand(tax.taxID)"></taxes-action>
        </td>
        <td class="padding-right-20px">{{ tax.rate }}</td>
        <td class="padding-right-20px">{{ tax.item }}</td>
        <td class="padding-right-20px">{{ tax.account }}</td>
        <td>{{ tax.location }}</td>
      </tr>
    </template>
    </tbody>
  </table>
</div>

<script src="~/js/PaginationComponent.js" asp-append-version="true"></script>

<script>
  const { createApp } = Vue;

  const TaxesAction = {
    name: 'TaxesAction',
    props: ['taxes', 'isExpanded'],
    template: '#taxes-action-template',
    methods: {
      toggleAction() {
        this.$emit('expand');
      }
    }
  }
  
  const app = createApp({
    components: {
      'pagination-component': PaginationComponent,
      'taxes-action': TaxesAction
    },
    data() {
      return {
        taxes: [],
        page: @Model.Page,
        pageSize: @Model.PageSize,
        nextPage: null,
        rememberPageSize: @(Model.RememberPageSize ? "true" : "false")
      };
    },
    methods: {
      fetchTaxes() {
        const storedPageSize = parseInt(localStorage.getItem('pageSize'));
        if (storedPageSize) {
          this.pageSize = storedPageSize;
        }

        let apiUrl = `/api/tax/get-taxes?page=${this.page}&pageSize=${this.pageSize}`;

				fetch(apiUrl)
					.then(response => response.json())
					.then(data => {
						this.taxes = data.taxes;
						if (data.page > 0) {
							this.page = data.page;
						}
						if (data.nextPage > 0) {
							this.nextPage = data.nextPage;
						} else {
							this.nextPage = null;
						}
          });
      }
    },
    mounted() {
      if (this.rememberPageSize) {
        localStorage.setItem('pageSize', this.pageSize);
      }
      this.fetchTaxes();
    }
  });

  app.mount('#app');
</script>