@model Accounting.Models.TaxViewModels.CreateTaxViewModel

@{
  ViewData["Title"] = "Create tax - " + ConfigurationSingleton.Instance.ApplicationName;
}

@{
  string headerText = "Create tax";
}

<partial name="_H1HeaderPartial" model="@headerText" />

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>
<script src="~/js/UniversalSelector.js" asp-append-version="true"></script>

<div class="display-flex margin-bottom-5px background-color-antiquewhite">
  <div class="flex-1 text-align-right">
    <a asp-action="Taxes" asp-controller="Tax" class="font-Roboto font-size-16px color-blue">Taxes</a>
    <a asp-action="Index" asp-controller="Home"
       class="font-Roboto font-size-16px color-blue margin-left-20px">Home</a>
  </div>
</div>

<form id="app" asp-action="Create" asp-controller="Tax" method="post" class="display-flex flex-direction-column margin-bottom-5px">
  <input type="hidden" name="SelectedItemId" v-model="selectedItemId" />
  <input type="hidden" name="SelectedAccountId" v-model="selectedAccountId" />
  <input type="hidden" name="SelectedLocationId" v-model="selectedLocationId" />

  <div class="display-flex flex-direction-column margin-bottom-5px">
    <label asp-for="Name" class="background-color-antiquewhite"></label>
    <input asp-for="Name"
           class="font-size-20px"
           maxlength="100" autocomplete="off" />
  </div>

  <div class="display-flex flex-direction-column margin-bottom-5px">
    <label asp-for="Description" class="background-color-antiquewhite"></label>
    <textarea asp-for="Description" class="font-size-20px" rows="6"></textarea>
  </div>

  <div class="display-flex flex-direction-column margin-bottom-5px">
    <label asp-for="Rate" class="background-color-antiquewhite">Rate (%)</label>
    <input asp-for="Rate" type="number" step="0.01" min="0" class="font-size-20px" />
  </div>

  <div class="margin-bottom-5px background-color-antiquewhite">
    @* <label>Items</label> *@
    <universal-selector :items="items"
                        :selected-items="selectedItem"
                        label="Item"
                        placeholder="Search items"
                        item-key="itemID"
                        item-label="name"
                        :single-select="true"
                        @@update:selected-items="selectedItem = $event">
    </universal-selector>
  </div>

  <div class="margin-bottom-5px background-color-antiquewhite">
    @* <label>Account</label> *@
    <universal-selector :items="accounts"
                        :selected-items="selectedAccount"
                        label="Account"
                        placeholder="Search accounts"
                        item-key="accountID"
                        item-label="name"
                        :single-select="true"
                        @@update:selected-items="selectedAccount = $event">
    </universal-selector>
  </div>

  <div class="margin-bottom-5px background-color-antiquewhite">
    @* <label>Location (optional)</label> *@
    <universal-selector :items="locations"
                        :selected-items="selectedLocation"
                        label="Location (optional)"
                        placeholder="Search locations"
                        item-key="locationID"
                        item-label="name"
                        :single-select="true"
                        @@update:selected-items="selectedLocation = $event">
    </universal-selector>
  </div>

  <button type="submit" class="full-width-regular-button">Create tax</button>
</form>

<script>
  const { createApp } = Vue;

  createUniversalSelectorComponent().then(UniversalSelector => {
    const app = createApp({
      components: {
        'universal-selector': UniversalSelector
      },
      data() {
        return {
          accounts: @Html.Raw(Json.Serialize(Model!.Accounts)),
          items: @Html.Raw(Model!.Items == null ? "[]" : Json.Serialize(Model.Items)),
          locations: @Html.Raw(Json.Serialize(Model!.Locations)),

          // arrays of selected objects for the selectors
          selectedItem: [],
          selectedAccount: [],
          selectedLocation: [],

          // hidden-field mirrors
          selectedItemId: null,
          selectedAccountId: null,
          selectedLocationId: null
        };
      },
      watch: {
        selectedItem: {
          immediate: true,
          handler(val) {
            this.selectedItemId = val?.[0]?.itemID ?? null;
          }
        },
        selectedAccount: {
          immediate: true,
          handler(val) {
            this.selectedAccountId = val?.[0]?.accountID ?? null;
          }
        },
        selectedLocation: {
          immediate: true,
          handler(val) {
            this.selectedLocationId = val?.[0]?.locationID ?? null;
          }
        }
      }
    });

    app.mount('#app');
  });
</script>