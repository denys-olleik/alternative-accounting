@model Accounting.Models.ToDoViewModels.CreateTaskViewModel

@{
  ViewData["Title"] = "Create task - " + ConfigurationSingleton.Instance.ApplicationName;
}

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>

@{
  string headerText = "Create task";
}
<partial name="_H1HeaderPartial" model="@headerText" />

<template id="tag-template">
  <div class="display-flex margin-bottom-5px margin-right-5px"
    :data-tag-id="tag.id">
    <a href="" @@click.prevent="selectTag" class="text-decoration-none background-color-dodgerblue padding-2px color-white border-radius-5px padding-sides-5px">
      {{ tag.name }}
    </a>
  </div>
</template>

<form id="app" asp-action="Create" asp-controller="ToDo" method="post" class="display-flex flex-direction-column margin-bottom-5px">
  <input type="hidden" asp-for="ParentToDoId" />
  <input type="hidden" name="SelectedTagIds" v-model="selectedTagsValue">
  <input type="hidden" name="SelectedUsers" :value="JSON.stringify(selectedUsers.map(u => u.userID))">
  <div class="display-flex flex-direction-column">
    <label asp-for="Title" class="background-color-antiquewhite"></label>
    <input asp-for="Title" class="margin-bottom-5px font-size-20px" />
  </div>
  <div class="display-flex flex-direction-column">
    <label asp-for="Content" class="background-color-antiquewhite"></label>
    <textarea asp-for="Content" class="margin-bottom-5px font-size-20px" rows="6"></textarea>
  </div>

  <universal-selector
    :items="users"
    :selected-items="selectedUsers"
    label="Assign users"
    placeholder="Search users"
    item-key="userID"
    item-label="fullName"
    @@update:selected-items="selectedUsers = $event"></universal-selector>

  <button type="submit" class="full-width-regular-button">Create task</button>
</form>

@if (Model != null && Model.ValidationResult != null)
{
  foreach (var error in Model.ValidationResult.Errors)
  {
    <div>
      <small class="color-red">@error.ErrorMessage</small>
    </div>
  }
  <div class="margin-bottom-5px">
  </div>
}

@if (Model != null && Model.ParentToDo != null)
{
  <fieldset class="margin-bottom-5px">
    <legend>Parent Task</legend>
    <div class="display-flex flex-direction-column">
      <div>
        <h2>@Model.ParentToDo.Title</h2>
      </div>
      <div class="display-flex flex-direction-column">
        <textarea asp-for="@Model.ParentToDo.HtmlContent" class="margin-bottom-5px font-size-20px" rows="6" disabled></textarea>
      </div>
    </div>
  </fieldset>
}

<script src="~/js/UniversalSelector.js" asp-append-version="true"></script>

<script>
  const { createApp } = Vue;

  const Tag = {
    name: 'Tag',
    template: '#tag-template',
    props: ['tag'],
    methods: {
      selectTag() {
        this.$emit('select', this.tag);
      }
    }
  };

  // Move your app creation into a function so you can register UniversalSelector after loading its template
  createUniversalSelectorComponent().then(UniversalSelector => {
    const app = createApp({
      components: {
        'tag': Tag,
        'universal-selector': UniversalSelector
      },
      data() {
        return {
          availableTags: @Html.Raw(Json.Serialize(Model.AvailableTags)),
          selectedTags: @Html.Raw(Model.SelectedTags != null ? Json.Serialize(Model.SelectedTags) : "[]"),
          users: @Html.Raw(Model.Users != null ? Json.Serialize(Model.Users) : "[]"),
          selectedUsers: @Html.Raw(Model.SelectedUsers != null ? Json.Serialize(Model.SelectedUsers) : "[]")
        };
      },
      methods: {
        addTag(event) {
          event.preventDefault();
        },
        moveToSelected(tag) {
          const index = this.availableTags.indexOf(tag);
          if (index > -1) {
            this.availableTags = [...this.availableTags.slice(0, index), ...this.availableTags.slice(index + 1)];
            this.selectedTags = [...this.selectedTags, tag];
          }
        },
        moveToAvailable(tag) {
          const index = this.selectedTags.indexOf(tag);
          if (index > -1) {
            this.selectedTags = [...this.selectedTags.slice(0, index), ...this.selectedTags.slice(index + 1)];
            this.availableTags = [...this.availableTags, tag];
          }
        }
      },
      computed: {
        selectedTagsValue() {
          return JSON.stringify(this.selectedTags.map(tag => tag.id));
        }
      }
    });

    app.mount('#app');
  });
</script>