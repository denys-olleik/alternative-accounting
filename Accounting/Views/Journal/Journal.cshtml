@model Accounting.Models.JournalViewModels.JournalPaginatedViewModel

@{
  ViewData["Title"] = "Journal - " + ConfigurationSingleton.Instance.ApplicationName;
}

@{
  string headerText = "Journal";
}

<partial name="_H1HeaderPartial" model="@headerText" />

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>

<div class="display-flex margin-bottom-5px background-color-antiquewhite">

  <div class="margin-left-20px flex-1 text-align-right">
    <a asp-action="Index" asp-controller="Home" class="font-Roboto font-size-16px color-blue margin-left-20px">Home</a>
  </div>
</div>

<div id="app">
  <table class="border-collapse width-100 margin-bottom-5px background-color-antiquewhite">
    <thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
      <tr>
        <th></th>
        <th class="text-align-left">Transaction</th>
        <th class="text-align-right">Type</th>
      </tr>
    </thead>
    <tbody class="font-Roboto-Mono">
      <template v-for="(journal, idx) in journalTransactions" :key="journal.journalTransactionID">
        <tr>
          <th class="text-align-left width-1px padding-right-20px fitwidth"></th>
          <td>
            <span :class="idx === selectedIndex ? 'blinking-cursor' : ''">â–ˆ</span>
            {{ journal.transactionGuid }}
          </td>
          <td class="text-align-right">{{ journal.linkType }}</td>
        </tr>
      </template>
    </tbody>
  </table>

  <pagination-component :prev-page-url="prevPageUrl"
    :next-page-url="nextPageUrl"
    :is-filtered="false"
    :page="page">
  </pagination-component>

  <table class="border-collapse width-100 margin-bottom-5px background-color-antiquewhite">
    <thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
      <tr>
        <th class="text-align-left width-1px padding-right-20px">Invoice</th>
        <th class="text-align-left">Customer</th>
        <th class="text-align-right">Amount</th>
      </tr>
    </thead>
    <tbody class="font-Roboto-Mono">
      <template v-for="invoice in invoices" :key="invoice.invoiceID">
        <tr>
          <td>
            <a :href="`/invoice/invoice-details?id=${invoice.invoiceID}`">
              {{ invoice.invoiceNumber }}
            </a>
          </td>
          <td>
            <business-entity-name-display :business-entity="invoice.businessEntity"></business-entity-name-display>
          </td>
          <td class="text-align-right">{{ invoice.totalAmount }}</td>
        </tr>
      </template>
    </tbody>
  </table>

  <table class="border-collapse width-100 margin-bottom-5px background-color-antiquewhite">
    <thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
      <tr>
        <th class="text-align-left">Title</th>
        <th class="text-align-right width-1px padding-right-20px">Quantity</th>
        <th class="text-align-right width-1px">Price</th>
      </tr>
    </thead>
    <tbody class="font-Roboto-Mono">
      <template v-for="line in invoiceLines" :key="line.invoiceLineID">
        <tr>
          <td>{{ line.title }}</td>
          <td class="text-align-right width-1px padding-right-20px">{{ line.quantity }}</td>
          <td class="text-align-right width-1px">{{ line.price }}</td>
        </tr>
      </template>
    </tbody>
  </table>
</div>

<script src="~/js/BusinessEntityNameDisplay.js" asp-append-version="true"></script>
<script src="~/js/PaginationComponent.js" asp-append-version="true"></script>

<script>
  const { createApp } = Vue;

  const app = createApp({
    components: {
      'pagination-component': PaginationComponent,
      'business-entity-name-display': BusinessEntityNameDisplay
    },
    data() {
      return {
        journalTransactions: [],
        invoices: [],
        invoiceLines: [],
        payment: null,
        reconciliation: null,
        journal: [],
        page: @Model.Page,
        pageSize: @Model.PageSize,
        nextPage: null,
        rememberPageSize: @(Model.RememberPageSize ? "true" : "false"),
        selectedIndex: 0
      }
    },
    computed: {
      prevPageUrl() {
        return this.page > 1 ? `/journal/journal?page=${this.page - 1}&pageSize=${this.pageSize}` : '';
      },
      nextPageUrl() {
        return this.nextPage ? `/journal/journal?page=${this.nextPage}&pageSize=${this.pageSize}` : '';
      },
      current() {
        return this.journalTransactions[this.selectedIndex] || null;
      }
    },
    methods: {
      qp(name) {
        const p = new URLSearchParams(window.location.search);
        return p.get(name);
      },
      linkIdFor(row) {
        if (!row) return null;
        switch (row.linkType) {
          case 'invoice': return row.journalInvoiceInvoiceLineID;
          case 'payment': return row.journalInvoiceInvoiceLinePaymentID;
          case 'reconciliation': return row.journalReconciliationTransactionID;
          default: return null;
        }
      },
      fetchJournals() {
        const storedPageSize = parseInt(localStorage.getItem('pageSize'));
        if (storedPageSize) this.pageSize = storedPageSize;

        fetch(`/api/journal/get-journals?page=${this.page}&pageSize=${this.pageSize}`)
          .then(r => r.json())
          .then(data => {
            this.journalTransactions = data.transactions || [];
            if (data.page > 0) this.page = data.page;
            this.nextPage = data.nextPage > 0 ? data.nextPage : null;

            const sel = this.qp('select'); // 'first' | 'last' | null
            if (sel === 'last' && this.journalTransactions.length > 0) {
              this.selectedIndex = this.journalTransactions.length - 1;
            } else {
              this.selectedIndex = 0;
            }

            if (this.current) {
              const id = this.linkIdFor(this.current);
              this.onSelectionChanged(id, this.current.linkType);
            }
          });
      },
      onArrowDown() {
        if (!this.journalTransactions.length) return;
        if (this.selectedIndex < this.journalTransactions.length - 1) {
          this.selectedIndex++;
          if (this.current) {
            const id = this.linkIdFor(this.current);
            this.onSelectionChanged(id, this.current.linkType);
          }
        } else if (this.nextPage) {
          window.location.href = `/journal/journal?page=${this.nextPage}&pageSize=${this.pageSize}&select=first`;
        }
      },
      onArrowUp() {
        if (!this.journalTransactions.length) return;
        if (this.selectedIndex > 0) {
          this.selectedIndex--;
          if (this.current) {
            const id = this.linkIdFor(this.current);
            this.onSelectionChanged(id, this.current.linkType);
          }
        } else if (this.page > 1) {
          window.location.href = `/journal/journal?page=${this.page - 1}&pageSize=${this.pageSize}&select=last`;
        }
      },
      onGlobalKeyDown(e) {
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          this.onArrowDown();
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          this.onArrowUp();
        }
      },
      onSelectionChanged(id, type) {
        this.invoices = [];
        this.invoiceLines = [];
        this.payment = null;
        this.reconciliation = null;

        if (type === 'invoice') {
          fetch(`/api/journal/get-intermediate-details?linkType=invoice&id=${id}`)
            .then(r => r.json())
            .then(data => {
              this.invoices = [data.invoice];
              this.invoiceLines = data.lines || [];
              this.journal = data.journal || [];
            });
        }
      }
    },
    mounted() {
      if (this.rememberPageSize) localStorage.setItem('pageSize', this.pageSize);
      this.fetchJournals();
      window.addEventListener('keydown', this.onGlobalKeyDown, { passive: false });
    }
  });

  app.mount('#app');
</script>