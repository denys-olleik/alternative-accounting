@model Accounting.Models.JournalViewModels.JournalPaginatedViewModel

@{
  ViewData["Title"] = "Journal - " + ConfigurationSingleton.Instance.ApplicationName;
}

@{
  string headerText = "Journal";
}

<partial name="_H1HeaderPartial" model="@headerText"/>

<script src="~/js/vue-3-5-13.js" asp-append-version="true"></script>

<div id="app">
  <table class="border-collapse width-100 margin-bottom-5px background-color-antiquewhite">
    <thead class="border-bottom-1px-solid-1a3b56 font-Roboto">
    <tr>
      <th></th>
      <th class="text-align-left">Transaction</th>
      <th class="text-align-right">Type</th>
    </tr>
    </thead>
    <tbody class="font-Roboto-Mono">
    <template v-for="journal in journalTransactions" :key="journal.journalID">
      <tr>
        <th class="text-align-left width-1px padding-right-20px fitwidth"></th>
        <td>â–ˆ {{ journal.transactionGuid }}</td>
        <td class="text-align-right">{{ journal.linkType }}</td>
      </tr>
    </template>
    </tbody>
  </table>
  
  <pagination-component :prev-page-url="`/journal/journal?page=${page - 1}&pageSize=${pageSize}`"
                        :next-page-url="nextPage ? `/journal/journal?page=${nextPage}&pageSize=${pageSize}` : ''" :is-filtered="false"
                        :page="page">
  </pagination-component>
</div>

<script src="~/js/BusinessEntityNameDisplay.js" asp-append-version="true"></script>
<script src="~/js/PaginationComponent.js" asp-append-version="true"></script>

<script>
  const { createApp } = Vue;
  
  const app = createApp({
    components: {
      'pagination-component': PaginationComponent
    },
    data() {
      return {
        journalTransactions: [],
        invoices: [],
        invoiceLineItems: [],
        payment: null,
        reconciliation: null,
        page: @Model.Page,
        pageSize: @Model.PageSize,
        nextPage: null,
        rememberPageSize: @(Model.RememberPageSize ? "true" : "false")
      }
    },
    methods: {
      fetchJournals() {
        const storedPageSize = parseInt(localStorage.getItem('pageSize'));
        if (storedPageSize) {
          this.pageSize = storedPageSize;
        }

        let apiUrl = `/api/journal/get-journals?page=${this.page}&pageSize=${this.pageSize}`;

        fetch(apiUrl)
          .then(response => response.json())
          .then(data => {
            this.journalTransactions = data.transactions;
            if (data.page > 0) {
              this.page = data.page;
            }
            if (data.nextPage > 0) {
              this.nextPage = data.nextPage;
            } else {
              this.nextPage = null;
            }
          });
      }
    },
    mounted() {
      if (this.rememberPageSize) {
        localStorage.setItem('pageSize', this.pageSize);
      }
      this.fetchJournals();
    }
  })
  
  app.mount('#app');
</script>